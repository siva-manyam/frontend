{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}},{"name":"./max.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":31,"index":90}}],"key":"/ig9kvdgCUKfntz07z+RRKdvFCY=","exportNames":["*"],"imports":1}},{"name":"./min.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":31,"index":122}}],"key":"IaiS1NqD3bj2r8kvzJAuj5V7ZVA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.clamp = clamp;\n  var _libNormalizeDatesJs = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _maxJs = require(_dependencyMap[1], \"./max.js\");\n  var _minJs = require(_dependencyMap[2], \"./min.js\");\n  /**\n   * The {@link clamp} function options.\n   */\n\n  /**\n   * The {@link clamp} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name clamp\n   * @category Interval Helpers\n   * @summary Return a date bounded by the start and the end of the given interval.\n   *\n   * @description\n   * Clamps a date to the lower bound with the start of the interval and the upper\n   * bound with the end of the interval.\n   *\n   * - When the date is less than the start of the interval, the start is returned.\n   * - When the date is greater than the end of the interval, the end is returned.\n   * - Otherwise the date is returned.\n   *\n   * @typeParam DateType - Date argument type.\n   * @typeParam IntervalType - Interval argument type.\n   * @typeParam Options - Options type.\n   *\n   * @param date - The date to be bounded\n   * @param interval - The interval to bound to\n   * @param options - An object with options\n   *\n   * @returns The date bounded by the start and the end of the interval\n   *\n   * @example\n   * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\n   * const result = clamp(new Date(2021, 2, 21), {\n   *   start: new Date(2021, 2, 22),\n   *   end: new Date(2021, 3, 1),\n   * })\n   * //=> Mon Mar 22 2021 00:00:00\n   */\n  function clamp(date, interval, options) {\n    const [date_, start, end] = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, date, interval.start, interval.end);\n    return (0, _minJs.min)([(0, _maxJs.max)([date_, start], options), end], options);\n  }\n\n  // Fallback for modularized imports:\n  var _default = clamp;\n});","lineCount":66,"map":[[7,2,59,0,"Object"],[7,8,59,0],[7,9,59,0,"defineProperty"],[7,23,59,0],[7,24,59,0,"exports"],[7,31,59,0],[8,4,59,0,"enumerable"],[8,14,59,0],[9,4,59,0,"get"],[9,7,59,0],[9,18,59,0,"get"],[9,19,59,0],[10,6,59,0],[10,13,59,0,"_default"],[10,21,59,0],[11,4,59,0],[12,2,59,0],[13,2,47,0,"exports"],[13,9,47,0],[13,10,47,0,"clamp"],[13,15,47,0],[13,18,47,0,"clamp"],[13,23,47,0],[14,2,1,0],[14,6,1,0,"_libNormalizeDatesJs"],[14,26,1,0],[14,29,1,0,"require"],[14,36,1,0],[14,37,1,0,"_dependencyMap"],[14,51,1,0],[15,2,2,0],[15,6,2,0,"_maxJs"],[15,12,2,0],[15,15,2,0,"require"],[15,22,2,0],[15,23,2,0,"_dependencyMap"],[15,37,2,0],[16,2,3,0],[16,6,3,0,"_minJs"],[16,12,3,0],[16,15,3,0,"require"],[16,22,3,0],[16,23,3,0,"_dependencyMap"],[16,37,3,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[21,2,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[28,2,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,0,46,0],[59,2,47,7],[59,11,47,16,"clamp"],[59,16,47,21,"clamp"],[59,17,47,22,"date"],[59,21,47,26],[59,23,47,28,"interval"],[59,31,47,36],[59,33,47,38,"options"],[59,40,47,45],[59,42,47,47],[60,4,48,2],[60,10,48,8],[60,11,48,9,"date_"],[60,16,48,14],[60,18,48,16,"start"],[60,23,48,21],[60,25,48,23,"end"],[60,28,48,26],[60,29,48,27],[60,32,48,30],[60,36,48,30,"normalizeDates"],[60,56,48,44],[60,57,48,44,"normalizeDates"],[60,71,48,44],[60,73,49,4,"options"],[60,80,49,11],[60,82,49,13,"in"],[60,84,49,15],[60,86,50,4,"date"],[60,90,50,8],[60,92,51,4,"interval"],[60,100,51,12],[60,101,51,13,"start"],[60,106,51,18],[60,108,52,4,"interval"],[60,116,52,12],[60,117,52,13,"end"],[60,120,53,2],[60,121,53,3],[61,4,55,2],[61,11,55,9],[61,15,55,9,"min"],[61,21,55,12],[61,22,55,12,"min"],[61,25,55,12],[61,27,55,13],[61,28,55,14],[61,32,55,14,"max"],[61,38,55,17],[61,39,55,17,"max"],[61,42,55,17],[61,44,55,18],[61,45,55,19,"date_"],[61,50,55,24],[61,52,55,26,"start"],[61,57,55,31],[61,58,55,32],[61,60,55,34,"options"],[61,67,55,41],[61,68,55,42],[61,70,55,44,"end"],[61,73,55,47],[61,74,55,48],[61,76,55,50,"options"],[61,83,55,57],[61,84,55,58],[62,2,56,0],[64,2,58,0],[65,2,59,0],[65,6,59,0,"_default"],[65,14,59,0],[65,17,59,15,"clamp"],[65,22,59,20],[66,0,59,21],[66,3]],"functionMap":{"names":["<global>","clamp"],"mappings":"AAA;OC8C;CDS"},"hasCjsExports":false},"type":"js/module"}]}