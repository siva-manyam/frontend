{"dependencies":[{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"],"imports":1}},{"name":"../Parser.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":38,"index":89}}],"key":"CIJslq/MUqKep4ImmeyUTywuBTk=","exportNames":["*"],"imports":1}},{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":91},"end":{"line":4,"column":64,"index":155}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Hour1to12Parser\", {\n    enumerable: true,\n    get: function () {\n      return Hour1to12Parser;\n    }\n  });\n  var _constantsJs = require(_dependencyMap[0], \"../constants.js\");\n  var _ParserJs = require(_dependencyMap[1], \"../Parser.js\");\n  var _utilsJs = require(_dependencyMap[2], \"../utils.js\");\n  class Hour1to12Parser extends _ParserJs.Parser {\n    priority = 70;\n    parse(dateString, token, match) {\n      switch (token) {\n        case \"h\":\n          return (0, _utilsJs.parseNumericPattern)(_constantsJs.numericPatterns.hour12h, dateString);\n        case \"ho\":\n          return match.ordinalNumber(dateString, {\n            unit: \"hour\"\n          });\n        default:\n          return (0, _utilsJs.parseNDigits)(token.length, dateString);\n      }\n    }\n    validate(_date, value) {\n      return value >= 1 && value <= 12;\n    }\n    set(date, _flags, value) {\n      const isPM = date.getHours() >= 12;\n      if (isPM && value < 12) {\n        date.setHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setHours(0, 0, 0, 0);\n      } else {\n        date.setHours(value, 0, 0, 0);\n      }\n      return date;\n    }\n    incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n  }\n});","lineCount":46,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"Hour1to12Parser"],[10,28,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[13,6,1,0,"_constantsJs"],[13,18,1,0],[13,21,1,0,"require"],[13,28,1,0],[13,29,1,0,"_dependencyMap"],[13,43,1,0],[14,2,2,0],[14,6,2,0,"_ParserJs"],[14,15,2,0],[14,18,2,0,"require"],[14,25,2,0],[14,26,2,0,"_dependencyMap"],[14,40,2,0],[15,2,4,0],[15,6,4,0,"_utilsJs"],[15,14,4,0],[15,17,4,0,"require"],[15,24,4,0],[15,25,4,0,"_dependencyMap"],[15,39,4,0],[16,2,6,7],[16,8,6,13,"Hour1to12Parser"],[16,23,6,28],[16,32,6,37,"Parser"],[16,41,6,43],[16,42,6,43,"Parser"],[16,48,6,43],[16,49,6,44],[17,4,7,2,"priority"],[17,12,7,10],[17,15,7,13],[17,17,7,15],[18,4,9,2,"parse"],[18,9,9,7,"parse"],[18,10,9,8,"dateString"],[18,20,9,18],[18,22,9,20,"token"],[18,27,9,25],[18,29,9,27,"match"],[18,34,9,32],[18,36,9,34],[19,6,10,4],[19,14,10,12,"token"],[19,19,10,17],[20,8,11,6],[20,13,11,11],[20,16,11,14],[21,10,12,8],[21,17,12,15],[21,21,12,15,"parseNumericPattern"],[21,29,12,34],[21,30,12,34,"parseNumericPattern"],[21,49,12,34],[21,51,12,35,"numericPatterns"],[21,63,12,50],[21,64,12,50,"numericPatterns"],[21,79,12,50],[21,80,12,51,"hour12h"],[21,87,12,58],[21,89,12,60,"dateString"],[21,99,12,70],[21,100,12,71],[22,8,13,6],[22,13,13,11],[22,17,13,15],[23,10,14,8],[23,17,14,15,"match"],[23,22,14,20],[23,23,14,21,"ordinalNumber"],[23,36,14,34],[23,37,14,35,"dateString"],[23,47,14,45],[23,49,14,47],[24,12,14,49,"unit"],[24,16,14,53],[24,18,14,55],[25,10,14,62],[25,11,14,63],[25,12,14,64],[26,8,15,6],[27,10,16,8],[27,17,16,15],[27,21,16,15,"parseNDigits"],[27,29,16,27],[27,30,16,27,"parseNDigits"],[27,42,16,27],[27,44,16,28,"token"],[27,49,16,33],[27,50,16,34,"length"],[27,56,16,40],[27,58,16,42,"dateString"],[27,68,16,52],[27,69,16,53],[28,6,17,4],[29,4,18,2],[30,4,20,2,"validate"],[30,12,20,10,"validate"],[30,13,20,11,"_date"],[30,18,20,16],[30,20,20,18,"value"],[30,25,20,23],[30,27,20,25],[31,6,21,4],[31,13,21,11,"value"],[31,18,21,16],[31,22,21,20],[31,23,21,21],[31,27,21,25,"value"],[31,32,21,30],[31,36,21,34],[31,38,21,36],[32,4,22,2],[33,4,24,2,"set"],[33,7,24,5,"set"],[33,8,24,6,"date"],[33,12,24,10],[33,14,24,12,"_flags"],[33,20,24,18],[33,22,24,20,"value"],[33,27,24,25],[33,29,24,27],[34,6,25,4],[34,12,25,10,"isPM"],[34,16,25,14],[34,19,25,17,"date"],[34,23,25,21],[34,24,25,22,"getHours"],[34,32,25,30],[34,33,25,31],[34,34,25,32],[34,38,25,36],[34,40,25,38],[35,6,26,4],[35,10,26,8,"isPM"],[35,14,26,12],[35,18,26,16,"value"],[35,23,26,21],[35,26,26,24],[35,28,26,26],[35,30,26,28],[36,8,27,6,"date"],[36,12,27,10],[36,13,27,11,"setHours"],[36,21,27,19],[36,22,27,20,"value"],[36,27,27,25],[36,30,27,28],[36,32,27,30],[36,34,27,32],[36,35,27,33],[36,37,27,35],[36,38,27,36],[36,40,27,38],[36,41,27,39],[36,42,27,40],[37,6,28,4],[37,7,28,5],[37,13,28,11],[37,17,28,15],[37,18,28,16,"isPM"],[37,22,28,20],[37,26,28,24,"value"],[37,31,28,29],[37,36,28,34],[37,38,28,36],[37,40,28,38],[38,8,29,6,"date"],[38,12,29,10],[38,13,29,11,"setHours"],[38,21,29,19],[38,22,29,20],[38,23,29,21],[38,25,29,23],[38,26,29,24],[38,28,29,26],[38,29,29,27],[38,31,29,29],[38,32,29,30],[38,33,29,31],[39,6,30,4],[39,7,30,5],[39,13,30,11],[40,8,31,6,"date"],[40,12,31,10],[40,13,31,11,"setHours"],[40,21,31,19],[40,22,31,20,"value"],[40,27,31,25],[40,29,31,27],[40,30,31,28],[40,32,31,30],[40,33,31,31],[40,35,31,33],[40,36,31,34],[40,37,31,35],[41,6,32,4],[42,6,33,4],[42,13,33,11,"date"],[42,17,33,15],[43,4,34,2],[44,4,36,2,"incompatibleTokens"],[44,22,36,20],[44,25,36,23],[44,26,36,24],[44,29,36,27],[44,31,36,29],[44,34,36,32],[44,36,36,34],[44,39,36,37],[44,41,36,39],[44,44,36,42],[44,46,36,44],[44,49,36,47],[44,50,36,48],[45,2,37,0],[46,0,37,1],[46,3]],"functionMap":{"names":["<global>","Hour1to12Parser","parse","validate","set"],"mappings":"AAA;OCK;ECG;GDS;EEE;GFE;EGE;GHU;CDG"},"hasCjsExports":false},"type":"js/module"}]}