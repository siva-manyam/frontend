{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}},{"name":"./closestIndexTo.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":53,"index":112}}],"key":"sTrjGiGNFj5RRzg0+tzT7Ho4+rs=","exportNames":["*"],"imports":1}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":113},"end":{"line":3,"column":51,"index":164}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.closestTo = closestTo;\n  var _libNormalizeDatesJs = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _closestIndexToJs = require(_dependencyMap[1], \"./closestIndexTo.js\");\n  var _constructFromJs = require(_dependencyMap[2], \"./constructFrom.js\");\n  /**\n   * The {@link closestTo} function options.\n   */\n\n  /**\n   * The {@link closestTo} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name closestTo\n   * @category Common Helpers\n   * @summary Return a date from the array closest to the given date.\n   *\n   * @description\n   * Return a date from the array closest to the given date.\n   *\n   * @typeParam DateToCompare - Date to compare argument type.\n   * @typeParam DatesType - Dates array argument type.\n   * @typeParam Options - Options type.\n   *\n   * @param dateToCompare - The date to compare with\n   * @param dates - The array to search\n   *\n   * @returns The date from the array closest to the given date or undefined if no valid value is given\n   *\n   * @example\n   * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n   * const dateToCompare = new Date(2015, 8, 6)\n   * const result = closestTo(dateToCompare, [\n   *   new Date(2000, 0, 1),\n   *   new Date(2030, 0, 1)\n   * ])\n   * //=> Tue Jan 01 2030 00:00:00\n   */\n  function closestTo(dateToCompare, dates, options) {\n    const [dateToCompare_, ...dates_] = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, dateToCompare, ...dates);\n    const index = (0, _closestIndexToJs.closestIndexTo)(dateToCompare_, dates_);\n    if (typeof index === \"number\" && isNaN(index)) return (0, _constructFromJs.constructFrom)(dateToCompare_, NaN);\n    if (index !== undefined) return dates_[index];\n  }\n\n  // Fallback for modularized imports:\n  var _default = closestTo;\n});","lineCount":63,"map":[[7,2,58,0,"Object"],[7,8,58,0],[7,9,58,0,"defineProperty"],[7,23,58,0],[7,24,58,0,"exports"],[7,31,58,0],[8,4,58,0,"enumerable"],[8,14,58,0],[9,4,58,0,"get"],[9,7,58,0],[9,18,58,0,"get"],[9,19,58,0],[10,6,58,0],[10,13,58,0,"_default"],[10,21,58,0],[11,4,58,0],[12,2,58,0],[13,2,42,0,"exports"],[13,9,42,0],[13,10,42,0,"closestTo"],[13,19,42,0],[13,22,42,0,"closestTo"],[13,31,42,0],[14,2,1,0],[14,6,1,0,"_libNormalizeDatesJs"],[14,26,1,0],[14,29,1,0,"require"],[14,36,1,0],[14,37,1,0,"_dependencyMap"],[14,51,1,0],[15,2,2,0],[15,6,2,0,"_closestIndexToJs"],[15,23,2,0],[15,26,2,0,"require"],[15,33,2,0],[15,34,2,0,"_dependencyMap"],[15,48,2,0],[16,2,3,0],[16,6,3,0,"_constructFromJs"],[16,22,3,0],[16,25,3,0,"require"],[16,32,3,0],[16,33,3,0,"_dependencyMap"],[16,47,3,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[21,2,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[28,2,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,2,42,7],[54,11,42,16,"closestTo"],[54,20,42,25,"closestTo"],[54,21,42,26,"dateToCompare"],[54,34,42,39],[54,36,42,41,"dates"],[54,41,42,46],[54,43,42,48,"options"],[54,50,42,55],[54,52,42,57],[55,4,43,2],[55,10,43,8],[55,11,43,9,"dateToCompare_"],[55,25,43,23],[55,27,43,25],[55,30,43,28,"dates_"],[55,36,43,34],[55,37,43,35],[55,40,43,38],[55,44,43,38,"normalizeDates"],[55,64,43,52],[55,65,43,52,"normalizeDates"],[55,79,43,52],[55,81,44,4,"options"],[55,88,44,11],[55,90,44,13,"in"],[55,92,44,15],[55,94,45,4,"dateToCompare"],[55,107,45,17],[55,109,46,4],[55,112,46,7,"dates"],[55,117,47,2],[55,118,47,3],[56,4,49,2],[56,10,49,8,"index"],[56,15,49,13],[56,18,49,16],[56,22,49,16,"closestIndexTo"],[56,39,49,30],[56,40,49,30,"closestIndexTo"],[56,54,49,30],[56,56,49,31,"dateToCompare_"],[56,70,49,45],[56,72,49,47,"dates_"],[56,78,49,53],[56,79,49,54],[57,4,51,2],[57,8,51,6],[57,15,51,13,"index"],[57,20,51,18],[57,25,51,23],[57,33,51,31],[57,37,51,35,"isNaN"],[57,42,51,40],[57,43,51,41,"index"],[57,48,51,46],[57,49,51,47],[57,51,52,4],[57,58,52,11],[57,62,52,11,"constructFrom"],[57,78,52,24],[57,79,52,24,"constructFrom"],[57,92,52,24],[57,94,52,25,"dateToCompare_"],[57,108,52,39],[57,110,52,41,"NaN"],[57,113,52,44],[57,114,52,45],[58,4,54,2],[58,8,54,6,"index"],[58,13,54,11],[58,18,54,16,"undefined"],[58,27,54,25],[58,29,54,27],[58,36,54,34,"dates_"],[58,42,54,40],[58,43,54,41,"index"],[58,48,54,46],[58,49,54,47],[59,2,55,0],[61,2,57,0],[62,2,58,0],[62,6,58,0,"_default"],[62,14,58,0],[62,17,58,15,"closestTo"],[62,26,58,24],[63,0,58,25],[63,3]],"functionMap":{"names":["<global>","closestTo"],"mappings":"AAA;OCyC;CDa"},"hasCjsExports":false},"type":"js/module"}]}