{"dependencies":[{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":53,"index":53}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.constructFrom = constructFrom;\n  var _constantsJs = require(_dependencyMap[0], \"./constants.js\");\n  /**\n   * @name constructFrom\n   * @category Generic Helpers\n   * @summary Constructs a date using the reference date and the value\n   *\n   * @description\n   * The function constructs a new date using the constructor from the reference\n   * date and the given value. It helps to build generic functions that accept\n   * date extensions.\n   *\n   * It defaults to `Date` if the passed reference date is a number or a string.\n   *\n   * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n   * enabling to transfer extra properties from the reference date to the new date.\n   * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n   * that accept a time zone as a constructor argument.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   *\n   * @param date - The reference date to take constructor from\n   * @param value - The value to create the date\n   *\n   * @returns Date initialized using the given date and value\n   *\n   * @example\n   * import { constructFrom } from \"./constructFrom/date-fns\";\n   *\n   * // A function that clones a date preserving the original type\n   * function cloneDate<DateType extends Date>(date: DateType): DateType {\n   *   return constructFrom(\n   *     date, // Use constructor from the given date\n   *     date.getTime() // Use the date value to create a new date\n   *   );\n   * }\n   */\n  function constructFrom(date, value) {\n    if (typeof date === \"function\") return date(value);\n    if (date && typeof date === \"object\" && _constantsJs.constructFromSymbol in date) return date[_constantsJs.constructFromSymbol](value);\n    if (date instanceof Date) return new date.constructor(value);\n    return new Date(value);\n  }\n\n  // Fallback for modularized imports:\n  var _default = constructFrom;\n});","lineCount":59,"map":[[7,2,50,0,"Object"],[7,8,50,0],[7,9,50,0,"defineProperty"],[7,23,50,0],[7,24,50,0,"exports"],[7,31,50,0],[8,4,50,0,"enumerable"],[8,14,50,0],[9,4,50,0,"get"],[9,7,50,0],[9,18,50,0,"get"],[9,19,50,0],[10,6,50,0],[10,13,50,0,"_default"],[10,21,50,0],[11,4,50,0],[12,2,50,0],[13,2,38,0,"exports"],[13,9,38,0],[13,10,38,0,"constructFrom"],[13,23,38,0],[13,26,38,0,"constructFrom"],[13,39,38,0],[14,2,1,0],[14,6,1,0,"_constantsJs"],[14,18,1,0],[14,21,1,0,"require"],[14,28,1,0],[14,29,1,0,"_dependencyMap"],[14,43,1,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,2,38,7],[50,11,38,16,"constructFrom"],[50,24,38,29,"constructFrom"],[50,25,38,30,"date"],[50,29,38,34],[50,31,38,36,"value"],[50,36,38,41],[50,38,38,43],[51,4,39,2],[51,8,39,6],[51,15,39,13,"date"],[51,19,39,17],[51,24,39,22],[51,34,39,32],[51,36,39,34],[51,43,39,41,"date"],[51,47,39,45],[51,48,39,46,"value"],[51,53,39,51],[51,54,39,52],[52,4,41,2],[52,8,41,6,"date"],[52,12,41,10],[52,16,41,14],[52,23,41,21,"date"],[52,27,41,25],[52,32,41,30],[52,40,41,38],[52,44,41,42,"constructFromSymbol"],[52,56,41,61],[52,57,41,61,"constructFromSymbol"],[52,76,41,61],[52,80,41,65,"date"],[52,84,41,69],[52,86,42,4],[52,93,42,11,"date"],[52,97,42,15],[52,98,42,16,"constructFromSymbol"],[52,110,42,35],[52,111,42,35,"constructFromSymbol"],[52,130,42,35],[52,131,42,36],[52,132,42,37,"value"],[52,137,42,42],[52,138,42,43],[53,4,44,2],[53,8,44,6,"date"],[53,12,44,10],[53,24,44,22,"Date"],[53,28,44,26],[53,30,44,28],[53,37,44,35],[53,41,44,39,"date"],[53,45,44,43],[53,46,44,44,"constructor"],[53,57,44,55],[53,58,44,56,"value"],[53,63,44,61],[53,64,44,62],[54,4,46,2],[54,11,46,9],[54,15,46,13,"Date"],[54,19,46,17],[54,20,46,18,"value"],[54,25,46,23],[54,26,46,24],[55,2,47,0],[57,2,49,0],[58,2,50,0],[58,6,50,0,"_default"],[58,14,50,0],[58,17,50,15,"constructFrom"],[58,30,50,28],[59,0,50,29],[59,3]],"functionMap":{"names":["<global>","constructFrom"],"mappings":"AAA;OCqC;CDS"},"hasCjsExports":false},"type":"js/module"}]}