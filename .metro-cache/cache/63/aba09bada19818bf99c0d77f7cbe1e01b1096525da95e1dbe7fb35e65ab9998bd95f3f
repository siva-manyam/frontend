{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"],"imports":1}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.eachYearOfInterval = eachYearOfInterval;\n  var _libNormalizeIntervalJs = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _constructFromJs = require(_dependencyMap[1], \"./constructFrom.js\");\n  /**\n   * The {@link eachYearOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachYearOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachYearOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of yearly timestamps within the specified time interval.\n   *\n   * @description\n   * Return the array of yearly timestamps within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n   *\n   * @example\n   * // Each year between 6 February 2014 and 10 August 2017:\n   * const result = eachYearOfInterval({\n   *   start: new Date(2014, 1, 6),\n   *   end: new Date(2017, 7, 10)\n   * })\n   * //=> [\n   * //   Wed Jan 01 2014 00:00:00,\n   * //   Thu Jan 01 2015 00:00:00,\n   * //   Fri Jan 01 2016 00:00:00,\n   * //   Sun Jan 01 2017 00:00:00\n   * // ]\n   */\n  function eachYearOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _libNormalizeIntervalJs.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const endTime = reversed ? +start : +end;\n    const date = reversed ? end : start;\n    date.setHours(0, 0, 0, 0);\n    date.setMonth(0, 1);\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFromJs.constructFrom)(start, date));\n      date.setFullYear(date.getFullYear() + step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = eachYearOfInterval;\n});","lineCount":82,"map":[[7,2,71,0,"Object"],[7,8,71,0],[7,9,71,0,"defineProperty"],[7,23,71,0],[7,24,71,0,"exports"],[7,31,71,0],[8,4,71,0,"enumerable"],[8,14,71,0],[9,4,71,0,"get"],[9,7,71,0],[9,18,71,0,"get"],[9,19,71,0],[10,6,71,0],[10,13,71,0,"_default"],[10,21,71,0],[11,4,71,0],[12,2,71,0],[13,2,44,0,"exports"],[13,9,44,0],[13,10,44,0,"eachYearOfInterval"],[13,28,44,0],[13,31,44,0,"eachYearOfInterval"],[13,49,44,0],[14,2,1,0],[14,6,1,0,"_libNormalizeIntervalJs"],[14,29,1,0],[14,32,1,0,"require"],[14,39,1,0],[14,40,1,0,"_dependencyMap"],[14,54,1,0],[15,2,2,0],[15,6,2,0,"_constructFromJs"],[15,22,2,0],[15,25,2,0,"require"],[15,32,2,0],[15,33,2,0,"_dependencyMap"],[15,47,2,0],[16,2,4,0],[17,0,5,0],[18,0,6,0],[20,2,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[27,2,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,2,44,7],[56,11,44,16,"eachYearOfInterval"],[56,29,44,34,"eachYearOfInterval"],[56,30,44,35,"interval"],[56,38,44,43],[56,40,44,45,"options"],[56,47,44,52],[56,49,44,54],[57,4,45,2],[57,10,45,8],[58,6,45,10,"start"],[58,11,45,15],[59,6,45,17,"end"],[60,4,45,21],[60,5,45,22],[60,8,45,25],[60,12,45,25,"normalizeInterval"],[60,35,45,42],[60,36,45,42,"normalizeInterval"],[60,53,45,42],[60,55,45,43,"options"],[60,62,45,50],[60,64,45,52,"in"],[60,66,45,54],[60,68,45,56,"interval"],[60,76,45,64],[60,77,45,65],[61,4,47,2],[61,8,47,6,"reversed"],[61,16,47,14],[61,19,47,17],[61,20,47,18,"start"],[61,25,47,23],[61,28,47,26],[61,29,47,27,"end"],[61,32,47,30],[62,4,48,2],[62,10,48,8,"endTime"],[62,17,48,15],[62,20,48,18,"reversed"],[62,28,48,26],[62,31,48,29],[62,32,48,30,"start"],[62,37,48,35],[62,40,48,38],[62,41,48,39,"end"],[62,44,48,42],[63,4,49,2],[63,10,49,8,"date"],[63,14,49,12],[63,17,49,15,"reversed"],[63,25,49,23],[63,28,49,26,"end"],[63,31,49,29],[63,34,49,32,"start"],[63,39,49,37],[64,4,50,2,"date"],[64,8,50,6],[64,9,50,7,"setHours"],[64,17,50,15],[64,18,50,16],[64,19,50,17],[64,21,50,19],[64,22,50,20],[64,24,50,22],[64,25,50,23],[64,27,50,25],[64,28,50,26],[64,29,50,27],[65,4,51,2,"date"],[65,8,51,6],[65,9,51,7,"setMonth"],[65,17,51,15],[65,18,51,16],[65,19,51,17],[65,21,51,19],[65,22,51,20],[65,23,51,21],[66,4,53,2],[66,8,53,6,"step"],[66,12,53,10],[66,15,53,13,"options"],[66,22,53,20],[66,24,53,22,"step"],[66,28,53,26],[66,32,53,30],[66,33,53,31],[67,4,54,2],[67,8,54,6],[67,9,54,7,"step"],[67,13,54,11],[67,15,54,13],[67,22,54,20],[67,24,54,22],[68,4,55,2],[68,8,55,6,"step"],[68,12,55,10],[68,15,55,13],[68,16,55,14],[68,18,55,16],[69,6,56,4,"step"],[69,10,56,8],[69,13,56,11],[69,14,56,12,"step"],[69,18,56,16],[70,6,57,4,"reversed"],[70,14,57,12],[70,17,57,15],[70,18,57,16,"reversed"],[70,26,57,24],[71,4,58,2],[72,4,60,2],[72,10,60,8,"dates"],[72,15,60,13],[72,18,60,16],[72,20,60,18],[73,4,62,2],[73,11,62,9],[73,12,62,10,"date"],[73,16,62,14],[73,20,62,18,"endTime"],[73,27,62,25],[73,29,62,27],[74,6,63,4,"dates"],[74,11,63,9],[74,12,63,10,"push"],[74,16,63,14],[74,17,63,15],[74,21,63,15,"constructFrom"],[74,37,63,28],[74,38,63,28,"constructFrom"],[74,51,63,28],[74,53,63,29,"start"],[74,58,63,34],[74,60,63,36,"date"],[74,64,63,40],[74,65,63,41],[74,66,63,42],[75,6,64,4,"date"],[75,10,64,8],[75,11,64,9,"setFullYear"],[75,22,64,20],[75,23,64,21,"date"],[75,27,64,25],[75,28,64,26,"getFullYear"],[75,39,64,37],[75,40,64,38],[75,41,64,39],[75,44,64,42,"step"],[75,48,64,46],[75,49,64,47],[76,4,65,2],[77,4,67,2],[77,11,67,9,"reversed"],[77,19,67,17],[77,22,67,20,"dates"],[77,27,67,25],[77,28,67,26,"reverse"],[77,35,67,33],[77,36,67,34],[77,37,67,35],[77,40,67,38,"dates"],[77,45,67,43],[78,2,68,0],[80,2,70,0],[81,2,71,0],[81,6,71,0,"_default"],[81,14,71,0],[81,17,71,15,"eachYearOfInterval"],[81,35,71,33],[82,0,71,34],[82,3]],"functionMap":{"names":["<global>","eachYearOfInterval"],"mappings":"AAA;OC2C;CDwB"},"hasCjsExports":false},"type":"js/module"}]}