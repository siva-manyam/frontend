{"dependencies":[{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"],"imports":1}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"],"imports":1}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":37,"index":154}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.roundToNearestHours = roundToNearestHours;\n  var _libGetRoundingMethodJs = require(_dependencyMap[0], \"./_lib/getRoundingMethod.js\");\n  var _constructFromJs = require(_dependencyMap[1], \"./constructFrom.js\");\n  var _toDateJs = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link roundToNearestHours} function options.\n   */\n\n  /**\n   * @name roundToNearestHours\n   * @category Hour Helpers\n   * @summary Rounds the given date to the nearest hour\n   *\n   * @description\n   * Rounds the given date to the nearest hour (or number of hours).\n   * Rounds up when the given date is exactly between the nearest round hours.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to round\n   * @param options - An object with options.\n   *\n   * @returns The new date rounded to the closest hour\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n   * //=> Thu Jul 10 2014 13:00:00\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest half hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n   * //=> Thu Jul 10 2014 12:00:00\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest half hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n   * //=> Thu Jul 10 2014 16:00:00\n   *\n   * @example\n   * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n   * //=> Thu Jul 10 2014 02:00:00\n   *\n   * @example\n   * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n   * //=> Thu Jul 10 2014 08:00:00\n   */\n  function roundToNearestHours(date, options) {\n    const nearestTo = options?.nearestTo ?? 1;\n    if (nearestTo < 1 || nearestTo > 12) return (0, _constructFromJs.constructFrom)(options?.in || date, NaN);\n    const date_ = (0, _toDateJs.toDate)(date, options?.in);\n    const fractionalMinutes = date_.getMinutes() / 60;\n    const fractionalSeconds = date_.getSeconds() / 60 / 60;\n    const fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60 / 60;\n    const hours = date_.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds;\n    const method = options?.roundingMethod ?? \"round\";\n    const roundingMethod = (0, _libGetRoundingMethodJs.getRoundingMethod)(method);\n    const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n    date_.setHours(roundedHours, 0, 0, 0);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = roundToNearestHours;\n});","lineCount":80,"map":[[7,2,77,0,"Object"],[7,8,77,0],[7,9,77,0,"defineProperty"],[7,23,77,0],[7,24,77,0,"exports"],[7,31,77,0],[8,4,77,0,"enumerable"],[8,14,77,0],[9,4,77,0,"get"],[9,7,77,0],[9,18,77,0,"get"],[9,19,77,0],[10,6,77,0],[10,13,77,0,"_default"],[10,21,77,0],[11,4,77,0],[12,2,77,0],[13,2,51,0,"exports"],[13,9,51,0],[13,10,51,0,"roundToNearestHours"],[13,29,51,0],[13,32,51,0,"roundToNearestHours"],[13,51,51,0],[14,2,1,0],[14,6,1,0,"_libGetRoundingMethodJs"],[14,29,1,0],[14,32,1,0,"require"],[14,39,1,0],[14,40,1,0,"_dependencyMap"],[14,54,1,0],[15,2,2,0],[15,6,2,0,"_constructFromJs"],[15,22,2,0],[15,25,2,0,"require"],[15,32,2,0],[15,33,2,0,"_dependencyMap"],[15,47,2,0],[16,2,3,0],[16,6,3,0,"_toDateJs"],[16,15,3,0],[16,18,3,0,"require"],[16,25,3,0],[16,26,3,0,"_dependencyMap"],[16,40,3,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[21,2,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,0,46,0],[59,0,47,0],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,2,51,7],[63,11,51,16,"roundToNearestHours"],[63,30,51,35,"roundToNearestHours"],[63,31,51,36,"date"],[63,35,51,40],[63,37,51,42,"options"],[63,44,51,49],[63,46,51,51],[64,4,52,2],[64,10,52,8,"nearestTo"],[64,19,52,17],[64,22,52,20,"options"],[64,29,52,27],[64,31,52,29,"nearestTo"],[64,40,52,38],[64,44,52,42],[64,45,52,43],[65,4,54,2],[65,8,54,6,"nearestTo"],[65,17,54,15],[65,20,54,18],[65,21,54,19],[65,25,54,23,"nearestTo"],[65,34,54,32],[65,37,54,35],[65,39,54,37],[65,41,55,4],[65,48,55,11],[65,52,55,11,"constructFrom"],[65,68,55,24],[65,69,55,24,"constructFrom"],[65,82,55,24],[65,84,55,25,"options"],[65,91,55,32],[65,93,55,34,"in"],[65,95,55,36],[65,99,55,40,"date"],[65,103,55,44],[65,105,55,46,"NaN"],[65,108,55,49],[65,109,55,50],[66,4,57,2],[66,10,57,8,"date_"],[66,15,57,13],[66,18,57,16],[66,22,57,16,"toDate"],[66,31,57,22],[66,32,57,22,"toDate"],[66,38,57,22],[66,40,57,23,"date"],[66,44,57,27],[66,46,57,29,"options"],[66,53,57,36],[66,55,57,38,"in"],[66,57,57,40],[66,58,57,41],[67,4,58,2],[67,10,58,8,"fractionalMinutes"],[67,27,58,25],[67,30,58,28,"date_"],[67,35,58,33],[67,36,58,34,"getMinutes"],[67,46,58,44],[67,47,58,45],[67,48,58,46],[67,51,58,49],[67,53,58,51],[68,4,59,2],[68,10,59,8,"fractionalSeconds"],[68,27,59,25],[68,30,59,28,"date_"],[68,35,59,33],[68,36,59,34,"getSeconds"],[68,46,59,44],[68,47,59,45],[68,48,59,46],[68,51,59,49],[68,53,59,51],[68,56,59,54],[68,58,59,56],[69,4,60,2],[69,10,60,8,"fractionalMilliseconds"],[69,32,60,30],[69,35,60,33,"date_"],[69,40,60,38],[69,41,60,39,"getMilliseconds"],[69,56,60,54],[69,57,60,55],[69,58,60,56],[69,61,60,59],[69,65,60,63],[69,68,60,66],[69,70,60,68],[69,73,60,71],[69,75,60,73],[70,4,61,2],[70,10,61,8,"hours"],[70,15,61,13],[70,18,62,4,"date_"],[70,23,62,9],[70,24,62,10,"getHours"],[70,32,62,18],[70,33,62,19],[70,34,62,20],[70,37,63,4,"fractionalMinutes"],[70,54,63,21],[70,57,64,4,"fractionalSeconds"],[70,74,64,21],[70,77,65,4,"fractionalMilliseconds"],[70,99,65,26],[71,4,67,2],[71,10,67,8,"method"],[71,16,67,14],[71,19,67,17,"options"],[71,26,67,24],[71,28,67,26,"roundingMethod"],[71,42,67,40],[71,46,67,44],[71,53,67,51],[72,4,68,2],[72,10,68,8,"roundingMethod"],[72,24,68,22],[72,27,68,25],[72,31,68,25,"getRoundingMethod"],[72,54,68,42],[72,55,68,42,"getRoundingMethod"],[72,72,68,42],[72,74,68,43,"method"],[72,80,68,49],[72,81,68,50],[73,4,70,2],[73,10,70,8,"roundedHours"],[73,22,70,20],[73,25,70,23,"roundingMethod"],[73,39,70,37],[73,40,70,38,"hours"],[73,45,70,43],[73,48,70,46,"nearestTo"],[73,57,70,55],[73,58,70,56],[73,61,70,59,"nearestTo"],[73,70,70,68],[74,4,72,2,"date_"],[74,9,72,7],[74,10,72,8,"setHours"],[74,18,72,16],[74,19,72,17,"roundedHours"],[74,31,72,29],[74,33,72,31],[74,34,72,32],[74,36,72,34],[74,37,72,35],[74,39,72,37],[74,40,72,38],[74,41,72,39],[75,4,73,2],[75,11,73,9,"date_"],[75,16,73,14],[76,2,74,0],[78,2,76,0],[79,2,77,0],[79,6,77,0,"_default"],[79,14,77,0],[79,17,77,15,"roundToNearestHours"],[79,36,77,34],[80,0,77,35],[80,3]],"functionMap":{"names":["<global>","roundToNearestHours"],"mappings":"AAA;OCkD;CDuB"},"hasCjsExports":false},"type":"js/module"}]}