{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoTaskManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":48,"index":125}}],"key":"XuoplolDboh/CUTNxf5WfqS0FBQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.defineTask = defineTask;\n  exports.isTaskDefined = isTaskDefined;\n  exports.isTaskRegisteredAsync = isTaskRegisteredAsync;\n  exports.getTaskOptionsAsync = getTaskOptionsAsync;\n  exports.getRegisteredTasksAsync = getRegisteredTasksAsync;\n  exports.unregisterTaskAsync = unregisterTaskAsync;\n  exports.unregisterAllTasksAsync = unregisterAllTasksAsync;\n  exports.isAvailableAsync = isAvailableAsync;\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _ExpoTaskManager = require(_dependencyMap[1], \"./ExpoTaskManager\");\n  var ExpoTaskManager = _interopDefault(_ExpoTaskManager);\n  const tasks = new Map();\n  function _validate(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new TypeError('`taskName` must be a non-empty string.');\n    }\n  }\n  // @needsAudit\n  /**\n   * Defines task function. It must be called in the global scope of your JavaScript bundle.\n   * In particular, it cannot be called in any of React lifecycle methods like `componentDidMount`.\n   * This limitation is due to the fact that when the application is launched in the background,\n   * we need to spin up your JavaScript app, run your task and then shut down â€” no views are mounted\n   * in this scenario.\n   *\n   * @param taskName Name of the task. It must be the same as the name you provided when registering the task.\n   * @param taskExecutor A function that will be invoked when the task with given `taskName` is executed.\n   */\n  function defineTask(taskName, taskExecutor) {\n    if (!taskName || typeof taskName !== 'string') {\n      console.warn(`TaskManager.defineTask: 'taskName' argument must be a non-empty string.`);\n      return;\n    }\n    if (!taskExecutor || typeof taskExecutor !== 'function') {\n      console.warn(`TaskManager.defineTask: 'task' argument must be a function.`);\n      return;\n    }\n    tasks.set(taskName, taskExecutor);\n  }\n  // @needsAudit\n  /**\n   * Checks whether the task is already defined.\n   *\n   * @param taskName Name of the task.\n   */\n  function isTaskDefined(taskName) {\n    return tasks.has(taskName);\n  }\n  // @needsAudit\n  /**\n   * Determine whether the task is registered. Registered tasks are stored in a persistent storage and\n   * preserved between sessions.\n   *\n   * @param taskName Name of the task.\n   * @returns A promise which resolves to `true` if a task with the given name is registered, otherwise `false`.\n   */\n  async function isTaskRegisteredAsync(taskName) {\n    if (!ExpoTaskManager.default.isTaskRegisteredAsync) {\n      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n    }\n    _validate(taskName);\n    return ExpoTaskManager.default.isTaskRegisteredAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * Retrieves `options` associated with the task, that were passed to the function registering the task\n   * (e.g. `Location.startLocationUpdatesAsync`).\n   *\n   * @param taskName Name of the task.\n   * @return A promise which fulfills with the `options` object that was passed while registering task\n   * with given name or `null` if task couldn't be found.\n   */\n  async function getTaskOptionsAsync(taskName) {\n    if (!ExpoTaskManager.default.getTaskOptionsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n    }\n    _validate(taskName);\n    return ExpoTaskManager.default.getTaskOptionsAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * Provides information about tasks registered in the app.\n   *\n   * @returns A promise which fulfills with an array of tasks registered in the app.\n   * @example\n   * ```js\n   * [\n   *   {\n   *     taskName: 'location-updates-task-name',\n   *     taskType: 'location',\n   *     options: {\n   *       accuracy: Location.Accuracy.High,\n   *       showsBackgroundLocationIndicator: false,\n   *     },\n   *   },\n   *   {\n   *     taskName: 'geofencing-task-name',\n   *     taskType: 'geofencing',\n   *     options: {\n   *       regions: [...],\n   *     },\n   *   },\n   * ]\n   * ```\n   */\n  async function getRegisteredTasksAsync() {\n    if (!ExpoTaskManager.default.getRegisteredTasksAsync) {\n      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n    }\n    return ExpoTaskManager.default.getRegisteredTasksAsync();\n  }\n  // @needsAudit\n  /**\n   * Unregisters task from the app, so the app will not be receiving updates for that task anymore.\n   * _It is recommended to use methods specialized by modules that registered the task, eg.\n   * [`Location.stopLocationUpdatesAsync`](./location/#expolocationstoplocationupdatesasynctaskname)._\n   *\n   * @param taskName Name of the task to unregister.\n   * @return A promise which fulfills as soon as the task is unregistered.\n   */\n  async function unregisterTaskAsync(taskName) {\n    if (!ExpoTaskManager.default.unregisterTaskAsync) {\n      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n    }\n    _validate(taskName);\n    await ExpoTaskManager.default.unregisterTaskAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * Unregisters all tasks registered for the running app. You may want to call this when the user is\n   * signing out and you no longer need to track his location or run any other background tasks.\n   * @return A promise which fulfills as soon as all tasks are completely unregistered.\n   */\n  async function unregisterAllTasksAsync() {\n    if (!ExpoTaskManager.default.unregisterAllTasksAsync) {\n      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n    }\n    await ExpoTaskManager.default.unregisterAllTasksAsync();\n  }\n  if (ExpoTaskManager.default) {\n    const eventEmitter = new _expoModulesCore.LegacyEventEmitter(ExpoTaskManager.default);\n    eventEmitter.addListener(ExpoTaskManager.default.EVENT_NAME, async ({\n      data,\n      error,\n      executionInfo\n    }) => {\n      const {\n        eventId,\n        taskName\n      } = executionInfo;\n      const taskExecutor = tasks.get(taskName);\n      let result = null;\n      if (taskExecutor) {\n        try {\n          // Execute JS task\n          result = await taskExecutor({\n            data,\n            error,\n            executionInfo\n          });\n        } catch (error) {\n          console.error(`TaskManager: Task \"${taskName}\" failed:`, error);\n        } finally {\n          // Notify manager the task is finished.\n          await ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n            eventId,\n            result\n          });\n        }\n      } else {\n        console.warn(`TaskManager: Task \"${taskName}\" has been executed but looks like it is not defined. Make sure that \"TaskManager.defineTask\" is called during initialization phase.`);\n        // No tasks defined -> we need to notify about finish anyway.\n        await ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n          eventId,\n          result\n        });\n        // We should also unregister such tasks automatically as the task might have been removed\n        // from the app or just renamed - in that case it needs to be registered again (with the new name).\n        await ExpoTaskManager.default.unregisterTaskAsync(taskName);\n      }\n    });\n  }\n  // @needsAudit\n  /**\n   * Determine if the `TaskManager` API can be used in this app.\n   * @return A promise which fulfills with `true` if the API can be used, and `false` otherwise.\n   * With Expo Go, `TaskManager` is not available on Android, and does not support background execution on iOS.\n   * Use a development build to avoid limitations: https://expo.fyi/dev-client.\n   * On the web, it always returns `false`.\n   */\n  async function isAvailableAsync() {\n    return ExpoTaskManager.default.isAvailableAsync();\n  }\n});","lineCount":205,"map":[[12,2,20,0,"exports"],[12,9,20,0],[12,10,20,0,"defineTask"],[12,20,20,0],[12,23,20,0,"defineTask"],[12,33,20,0],[13,2,37,0,"exports"],[13,9,37,0],[13,10,37,0,"isTaskDefined"],[13,23,37,0],[13,26,37,0,"isTaskDefined"],[13,39,37,0],[14,2,48,0,"exports"],[14,9,48,0],[14,10,48,0,"isTaskRegisteredAsync"],[14,31,48,0],[14,34,48,0,"isTaskRegisteredAsync"],[14,55,48,0],[15,2,64,0,"exports"],[15,9,64,0],[15,10,64,0,"getTaskOptionsAsync"],[15,29,64,0],[15,32,64,0,"getTaskOptionsAsync"],[15,51,64,0],[16,2,97,0,"exports"],[16,9,97,0],[16,10,97,0,"getRegisteredTasksAsync"],[16,33,97,0],[16,36,97,0,"getRegisteredTasksAsync"],[16,59,97,0],[17,2,112,0,"exports"],[17,9,112,0],[17,10,112,0,"unregisterTaskAsync"],[17,29,112,0],[17,32,112,0,"unregisterTaskAsync"],[17,51,112,0],[18,2,125,0,"exports"],[18,9,125,0],[18,10,125,0,"unregisterAllTasksAsync"],[18,33,125,0],[18,36,125,0,"unregisterAllTasksAsync"],[18,59,125,0],[19,2,168,0,"exports"],[19,9,168,0],[19,10,168,0,"isAvailableAsync"],[19,26,168,0],[19,29,168,0,"isAvailableAsync"],[19,45,168,0],[20,2,1,0],[20,6,1,0,"_expoModulesCore"],[20,22,1,0],[20,25,1,0,"require"],[20,32,1,0],[20,33,1,0,"_dependencyMap"],[20,47,1,0],[21,2,2,0],[21,6,2,0,"_ExpoTaskManager"],[21,22,2,0],[21,25,2,0,"require"],[21,32,2,0],[21,33,2,0,"_dependencyMap"],[21,47,2,0],[22,2,2,0],[22,6,2,0,"ExpoTaskManager"],[22,21,2,0],[22,24,2,0,"_interopDefault"],[22,39,2,0],[22,40,2,0,"_ExpoTaskManager"],[22,56,2,0],[23,2,3,0],[23,8,3,6,"tasks"],[23,13,3,11],[23,16,3,14],[23,20,3,18,"Map"],[23,23,3,21],[23,24,3,22],[23,25,3,23],[24,2,4,0],[24,11,4,9,"_validate"],[24,20,4,18,"_validate"],[24,21,4,19,"taskName"],[24,29,4,27],[24,31,4,29],[25,4,5,4],[25,8,5,8],[25,9,5,9,"taskName"],[25,17,5,17],[25,21,5,21],[25,28,5,28,"taskName"],[25,36,5,36],[25,41,5,41],[25,49,5,49],[25,51,5,51],[26,6,6,8],[26,12,6,14],[26,16,6,18,"TypeError"],[26,25,6,27],[26,26,6,28],[26,66,6,68],[26,67,6,69],[27,4,7,4],[28,2,8,0],[29,2,9,0],[30,2,10,0],[31,0,11,0],[32,0,12,0],[33,0,13,0],[34,0,14,0],[35,0,15,0],[36,0,16,0],[37,0,17,0],[38,0,18,0],[39,0,19,0],[40,2,20,7],[40,11,20,16,"defineTask"],[40,21,20,26,"defineTask"],[40,22,20,27,"taskName"],[40,30,20,35],[40,32,20,37,"taskExecutor"],[40,44,20,49],[40,46,20,51],[41,4,21,4],[41,8,21,8],[41,9,21,9,"taskName"],[41,17,21,17],[41,21,21,21],[41,28,21,28,"taskName"],[41,36,21,36],[41,41,21,41],[41,49,21,49],[41,51,21,51],[42,6,22,8,"console"],[42,13,22,15],[42,14,22,16,"warn"],[42,18,22,20],[42,19,22,21],[42,92,22,94],[42,93,22,95],[43,6,23,8],[44,4,24,4],[45,4,25,4],[45,8,25,8],[45,9,25,9,"taskExecutor"],[45,21,25,21],[45,25,25,25],[45,32,25,32,"taskExecutor"],[45,44,25,44],[45,49,25,49],[45,59,25,59],[45,61,25,61],[46,6,26,8,"console"],[46,13,26,15],[46,14,26,16,"warn"],[46,18,26,20],[46,19,26,21],[46,80,26,82],[46,81,26,83],[47,6,27,8],[48,4,28,4],[49,4,29,4,"tasks"],[49,9,29,9],[49,10,29,10,"set"],[49,13,29,13],[49,14,29,14,"taskName"],[49,22,29,22],[49,24,29,24,"taskExecutor"],[49,36,29,36],[49,37,29,37],[50,2,30,0],[51,2,31,0],[52,2,32,0],[53,0,33,0],[54,0,34,0],[55,0,35,0],[56,0,36,0],[57,2,37,7],[57,11,37,16,"isTaskDefined"],[57,24,37,29,"isTaskDefined"],[57,25,37,30,"taskName"],[57,33,37,38],[57,35,37,40],[58,4,38,4],[58,11,38,11,"tasks"],[58,16,38,16],[58,17,38,17,"has"],[58,20,38,20],[58,21,38,21,"taskName"],[58,29,38,29],[58,30,38,30],[59,2,39,0],[60,2,40,0],[61,2,41,0],[62,0,42,0],[63,0,43,0],[64,0,44,0],[65,0,45,0],[66,0,46,0],[67,0,47,0],[68,2,48,7],[68,17,48,22,"isTaskRegisteredAsync"],[68,38,48,43,"isTaskRegisteredAsync"],[68,39,48,44,"taskName"],[68,47,48,52],[68,49,48,54],[69,4,49,4],[69,8,49,8],[69,9,49,9,"ExpoTaskManager"],[69,24,49,24],[69,25,49,24,"default"],[69,32,49,24],[69,33,49,25,"isTaskRegisteredAsync"],[69,54,49,46],[69,56,49,48],[70,6,50,8],[70,12,50,14],[70,16,50,18,"UnavailabilityError"],[70,32,50,37],[70,33,50,37,"UnavailabilityError"],[70,52,50,37],[70,53,50,38],[70,66,50,51],[70,68,50,53],[70,91,50,76],[70,92,50,77],[71,4,51,4],[72,4,52,4,"_validate"],[72,13,52,13],[72,14,52,14,"taskName"],[72,22,52,22],[72,23,52,23],[73,4,53,4],[73,11,53,11,"ExpoTaskManager"],[73,26,53,26],[73,27,53,26,"default"],[73,34,53,26],[73,35,53,27,"isTaskRegisteredAsync"],[73,56,53,48],[73,57,53,49,"taskName"],[73,65,53,57],[73,66,53,58],[74,2,54,0],[75,2,55,0],[76,2,56,0],[77,0,57,0],[78,0,58,0],[79,0,59,0],[80,0,60,0],[81,0,61,0],[82,0,62,0],[83,0,63,0],[84,2,64,7],[84,17,64,22,"getTaskOptionsAsync"],[84,36,64,41,"getTaskOptionsAsync"],[84,37,64,42,"taskName"],[84,45,64,50],[84,47,64,52],[85,4,65,4],[85,8,65,8],[85,9,65,9,"ExpoTaskManager"],[85,24,65,24],[85,25,65,24,"default"],[85,32,65,24],[85,33,65,25,"getTaskOptionsAsync"],[85,52,65,44],[85,54,65,46],[86,6,66,8],[86,12,66,14],[86,16,66,18,"UnavailabilityError"],[86,32,66,37],[86,33,66,37,"UnavailabilityError"],[86,52,66,37],[86,53,66,38],[86,66,66,51],[86,68,66,53],[86,89,66,74],[86,90,66,75],[87,4,67,4],[88,4,68,4,"_validate"],[88,13,68,13],[88,14,68,14,"taskName"],[88,22,68,22],[88,23,68,23],[89,4,69,4],[89,11,69,11,"ExpoTaskManager"],[89,26,69,26],[89,27,69,26,"default"],[89,34,69,26],[89,35,69,27,"getTaskOptionsAsync"],[89,54,69,46],[89,55,69,47,"taskName"],[89,63,69,55],[89,64,69,56],[90,2,70,0],[91,2,71,0],[92,2,72,0],[93,0,73,0],[94,0,74,0],[95,0,75,0],[96,0,76,0],[97,0,77,0],[98,0,78,0],[99,0,79,0],[100,0,80,0],[101,0,81,0],[102,0,82,0],[103,0,83,0],[104,0,84,0],[105,0,85,0],[106,0,86,0],[107,0,87,0],[108,0,88,0],[109,0,89,0],[110,0,90,0],[111,0,91,0],[112,0,92,0],[113,0,93,0],[114,0,94,0],[115,0,95,0],[116,0,96,0],[117,2,97,7],[117,17,97,22,"getRegisteredTasksAsync"],[117,40,97,45,"getRegisteredTasksAsync"],[117,41,97,45],[117,43,97,48],[118,4,98,4],[118,8,98,8],[118,9,98,9,"ExpoTaskManager"],[118,24,98,24],[118,25,98,24,"default"],[118,32,98,24],[118,33,98,25,"getRegisteredTasksAsync"],[118,56,98,48],[118,58,98,50],[119,6,99,8],[119,12,99,14],[119,16,99,18,"UnavailabilityError"],[119,32,99,37],[119,33,99,37,"UnavailabilityError"],[119,52,99,37],[119,53,99,38],[119,66,99,51],[119,68,99,53],[119,93,99,78],[119,94,99,79],[120,4,100,4],[121,4,101,4],[121,11,101,11,"ExpoTaskManager"],[121,26,101,26],[121,27,101,26,"default"],[121,34,101,26],[121,35,101,27,"getRegisteredTasksAsync"],[121,58,101,50],[121,59,101,51],[121,60,101,52],[122,2,102,0],[123,2,103,0],[124,2,104,0],[125,0,105,0],[126,0,106,0],[127,0,107,0],[128,0,108,0],[129,0,109,0],[130,0,110,0],[131,0,111,0],[132,2,112,7],[132,17,112,22,"unregisterTaskAsync"],[132,36,112,41,"unregisterTaskAsync"],[132,37,112,42,"taskName"],[132,45,112,50],[132,47,112,52],[133,4,113,4],[133,8,113,8],[133,9,113,9,"ExpoTaskManager"],[133,24,113,24],[133,25,113,24,"default"],[133,32,113,24],[133,33,113,25,"unregisterTaskAsync"],[133,52,113,44],[133,54,113,46],[134,6,114,8],[134,12,114,14],[134,16,114,18,"UnavailabilityError"],[134,32,114,37],[134,33,114,37,"UnavailabilityError"],[134,52,114,37],[134,53,114,38],[134,66,114,51],[134,68,114,53],[134,89,114,74],[134,90,114,75],[135,4,115,4],[136,4,116,4,"_validate"],[136,13,116,13],[136,14,116,14,"taskName"],[136,22,116,22],[136,23,116,23],[137,4,117,4],[137,10,117,10,"ExpoTaskManager"],[137,25,117,25],[137,26,117,25,"default"],[137,33,117,25],[137,34,117,26,"unregisterTaskAsync"],[137,53,117,45],[137,54,117,46,"taskName"],[137,62,117,54],[137,63,117,55],[138,2,118,0],[139,2,119,0],[140,2,120,0],[141,0,121,0],[142,0,122,0],[143,0,123,0],[144,0,124,0],[145,2,125,7],[145,17,125,22,"unregisterAllTasksAsync"],[145,40,125,45,"unregisterAllTasksAsync"],[145,41,125,45],[145,43,125,48],[146,4,126,4],[146,8,126,8],[146,9,126,9,"ExpoTaskManager"],[146,24,126,24],[146,25,126,24,"default"],[146,32,126,24],[146,33,126,25,"unregisterAllTasksAsync"],[146,56,126,48],[146,58,126,50],[147,6,127,8],[147,12,127,14],[147,16,127,18,"UnavailabilityError"],[147,32,127,37],[147,33,127,37,"UnavailabilityError"],[147,52,127,37],[147,53,127,38],[147,66,127,51],[147,68,127,53],[147,93,127,78],[147,94,127,79],[148,4,128,4],[149,4,129,4],[149,10,129,10,"ExpoTaskManager"],[149,25,129,25],[149,26,129,25,"default"],[149,33,129,25],[149,34,129,26,"unregisterAllTasksAsync"],[149,57,129,49],[149,58,129,50],[149,59,129,51],[150,2,130,0],[151,2,131,0],[151,6,131,4,"ExpoTaskManager"],[151,21,131,19],[151,22,131,19,"default"],[151,29,131,19],[151,31,131,21],[152,4,132,4],[152,10,132,10,"eventEmitter"],[152,22,132,22],[152,25,132,25],[152,29,132,29,"LegacyEventEmitter"],[152,45,132,47],[152,46,132,47,"LegacyEventEmitter"],[152,64,132,47],[152,65,132,48,"ExpoTaskManager"],[152,80,132,63],[152,81,132,63,"default"],[152,88,132,63],[152,89,132,64],[153,4,133,4,"eventEmitter"],[153,16,133,16],[153,17,133,17,"addListener"],[153,28,133,28],[153,29,133,29,"ExpoTaskManager"],[153,44,133,44],[153,45,133,44,"default"],[153,52,133,44],[153,53,133,45,"EVENT_NAME"],[153,63,133,55],[153,65,133,57],[153,72,133,64],[154,6,133,66,"data"],[154,10,133,70],[155,6,133,72,"error"],[155,11,133,77],[156,6,133,79,"executionInfo"],[157,4,133,93],[157,5,133,94],[157,10,133,99],[158,6,134,8],[158,12,134,14],[159,8,134,16,"eventId"],[159,15,134,23],[160,8,134,25,"taskName"],[161,6,134,34],[161,7,134,35],[161,10,134,38,"executionInfo"],[161,23,134,51],[162,6,135,8],[162,12,135,14,"taskExecutor"],[162,24,135,26],[162,27,135,29,"tasks"],[162,32,135,34],[162,33,135,35,"get"],[162,36,135,38],[162,37,135,39,"taskName"],[162,45,135,47],[162,46,135,48],[163,6,136,8],[163,10,136,12,"result"],[163,16,136,18],[163,19,136,21],[163,23,136,25],[164,6,137,8],[164,10,137,12,"taskExecutor"],[164,22,137,24],[164,24,137,26],[165,8,138,12],[165,12,138,16],[166,10,139,16],[167,10,140,16,"result"],[167,16,140,22],[167,19,140,25],[167,25,140,31,"taskExecutor"],[167,37,140,43],[167,38,140,44],[168,12,140,46,"data"],[168,16,140,50],[169,12,140,52,"error"],[169,17,140,57],[170,12,140,59,"executionInfo"],[171,10,140,73],[171,11,140,74],[171,12,140,75],[172,8,141,12],[172,9,141,13],[172,10,142,12],[172,17,142,19,"error"],[172,22,142,24],[172,24,142,26],[173,10,143,16,"console"],[173,17,143,23],[173,18,143,24,"error"],[173,23,143,29],[173,24,143,30],[173,46,143,52,"taskName"],[173,54,143,60],[173,65,143,71],[173,67,143,73,"error"],[173,72,143,78],[173,73,143,79],[174,8,144,12],[174,9,144,13],[174,18,145,20],[175,10,146,16],[176,10,147,16],[176,16,147,22,"ExpoTaskManager"],[176,31,147,37],[176,32,147,37,"default"],[176,39,147,37],[176,40,147,38,"notifyTaskFinishedAsync"],[176,63,147,61],[176,64,147,62,"taskName"],[176,72,147,70],[176,74,147,72],[177,12,147,74,"eventId"],[177,19,147,81],[178,12,147,83,"result"],[179,10,147,90],[179,11,147,91],[179,12,147,92],[180,8,148,12],[181,6,149,8],[181,7,149,9],[181,13,150,13],[182,8,151,12,"console"],[182,15,151,19],[182,16,151,20,"warn"],[182,20,151,24],[182,21,151,25],[182,43,151,47,"taskName"],[182,51,151,55],[182,185,151,189],[182,186,151,190],[183,8,152,12],[184,8,153,12],[184,14,153,18,"ExpoTaskManager"],[184,29,153,33],[184,30,153,33,"default"],[184,37,153,33],[184,38,153,34,"notifyTaskFinishedAsync"],[184,61,153,57],[184,62,153,58,"taskName"],[184,70,153,66],[184,72,153,68],[185,10,153,70,"eventId"],[185,17,153,77],[186,10,153,79,"result"],[187,8,153,86],[187,9,153,87],[187,10,153,88],[188,8,154,12],[189,8,155,12],[190,8,156,12],[190,14,156,18,"ExpoTaskManager"],[190,29,156,33],[190,30,156,33,"default"],[190,37,156,33],[190,38,156,34,"unregisterTaskAsync"],[190,57,156,53],[190,58,156,54,"taskName"],[190,66,156,62],[190,67,156,63],[191,6,157,8],[192,4,158,4],[192,5,158,5],[192,6,158,6],[193,2,159,0],[194,2,160,0],[195,2,161,0],[196,0,162,0],[197,0,163,0],[198,0,164,0],[199,0,165,0],[200,0,166,0],[201,0,167,0],[202,2,168,7],[202,17,168,22,"isAvailableAsync"],[202,33,168,38,"isAvailableAsync"],[202,34,168,38],[202,36,168,41],[203,4,169,4],[203,11,169,11,"ExpoTaskManager"],[203,26,169,26],[203,27,169,26,"default"],[203,34,169,26],[203,35,169,27,"isAvailableAsync"],[203,51,169,43],[203,52,169,44],[203,53,169,45],[204,2,170,0],[205,0,170,1],[205,3]],"functionMap":{"names":["<global>","_validate","defineTask","isTaskDefined","isTaskRegisteredAsync","getTaskOptionsAsync","getRegisteredTasksAsync","unregisterTaskAsync","unregisterAllTasksAsync","eventEmitter.addListener$argument_1","isAvailableAsync"],"mappings":"AAA;ACG;CDI;OEY;CFU;OGO;CHE;OIS;CJM;OKU;CLM;OM2B;CNK;OOU;CPM;OQO;CRK;yDSG;KTyB;OUU;CVE"},"hasCjsExports":false},"type":"js/module"}]}