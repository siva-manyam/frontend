{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"],"imports":1}},{"name":"./addQuarters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":47,"index":112}}],"key":"J7VZrCZ/m6TQ//8mFrNkpjNI3Vc=","exportNames":["*"],"imports":1}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":113},"end":{"line":3,"column":51,"index":164}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"],"imports":1}},{"name":"./startOfQuarter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}}],"key":"aU/n5nvPF8kBieqP++QSiTpo2xI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.eachQuarterOfInterval = eachQuarterOfInterval;\n  var _libNormalizeIntervalJs = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _addQuartersJs = require(_dependencyMap[1], \"./addQuarters.js\");\n  var _constructFromJs = require(_dependencyMap[2], \"./constructFrom.js\");\n  var _startOfQuarterJs = require(_dependencyMap[3], \"./startOfQuarter.js\");\n  /**\n   * The {@link eachQuarterOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachQuarterOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of quarters within the specified time interval.\n   *\n   * @description\n   * Return the array of quarters within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval\n   * @param options - An object with options\n   *\n   * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n   *\n   * @example\n   * // Each quarter within interval 6 February 2014 - 10 August 2014:\n   * const result = eachQuarterOfInterval({\n   *   start: new Date(2014, 1, 6),\n   *   end: new Date(2014, 7, 10),\n   * })\n   * //=> [\n   * //   Wed Jan 01 2014 00:00:00,\n   * //   Tue Apr 01 2014 00:00:00,\n   * //   Tue Jul 01 2014 00:00:00,\n   * // ]\n   */\n  function eachQuarterOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _libNormalizeIntervalJs.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const endTime = reversed ? +(0, _startOfQuarterJs.startOfQuarter)(start) : +(0, _startOfQuarterJs.startOfQuarter)(end);\n    let date = reversed ? (0, _startOfQuarterJs.startOfQuarter)(end) : (0, _startOfQuarterJs.startOfQuarter)(start);\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFromJs.constructFrom)(start, date));\n      date = (0, _addQuartersJs.addQuarters)(date, step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = eachQuarterOfInterval;\n});","lineCount":81,"map":[[7,2,70,0,"Object"],[7,8,70,0],[7,9,70,0,"defineProperty"],[7,23,70,0],[7,24,70,0,"exports"],[7,31,70,0],[8,4,70,0,"enumerable"],[8,14,70,0],[9,4,70,0,"get"],[9,7,70,0],[9,18,70,0,"get"],[9,19,70,0],[10,6,70,0],[10,13,70,0,"_default"],[10,21,70,0],[11,4,70,0],[12,2,70,0],[13,2,45,0,"exports"],[13,9,45,0],[13,10,45,0,"eachQuarterOfInterval"],[13,31,45,0],[13,34,45,0,"eachQuarterOfInterval"],[13,55,45,0],[14,2,1,0],[14,6,1,0,"_libNormalizeIntervalJs"],[14,29,1,0],[14,32,1,0,"require"],[14,39,1,0],[14,40,1,0,"_dependencyMap"],[14,54,1,0],[15,2,2,0],[15,6,2,0,"_addQuartersJs"],[15,20,2,0],[15,23,2,0,"require"],[15,30,2,0],[15,31,2,0,"_dependencyMap"],[15,45,2,0],[16,2,3,0],[16,6,3,0,"_constructFromJs"],[16,22,3,0],[16,25,3,0,"require"],[16,32,3,0],[16,33,3,0,"_dependencyMap"],[16,47,3,0],[17,2,4,0],[17,6,4,0,"_startOfQuarterJs"],[17,23,4,0],[17,26,4,0,"require"],[17,33,4,0],[17,34,4,0,"_dependencyMap"],[17,48,4,0],[18,2,6,0],[19,0,7,0],[20,0,8,0],[22,2,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[29,2,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,2,45,7],[57,11,45,16,"eachQuarterOfInterval"],[57,32,45,37,"eachQuarterOfInterval"],[57,33,45,38,"interval"],[57,41,45,46],[57,43,45,48,"options"],[57,50,45,55],[57,52,45,57],[58,4,46,2],[58,10,46,8],[59,6,46,10,"start"],[59,11,46,15],[60,6,46,17,"end"],[61,4,46,21],[61,5,46,22],[61,8,46,25],[61,12,46,25,"normalizeInterval"],[61,35,46,42],[61,36,46,42,"normalizeInterval"],[61,53,46,42],[61,55,46,43,"options"],[61,62,46,50],[61,64,46,52,"in"],[61,66,46,54],[61,68,46,56,"interval"],[61,76,46,64],[61,77,46,65],[62,4,48,2],[62,8,48,6,"reversed"],[62,16,48,14],[62,19,48,17],[62,20,48,18,"start"],[62,25,48,23],[62,28,48,26],[62,29,48,27,"end"],[62,32,48,30],[63,4,49,2],[63,10,49,8,"endTime"],[63,17,49,15],[63,20,49,18,"reversed"],[63,28,49,26],[63,31,49,29],[63,32,49,30],[63,36,49,30,"startOfQuarter"],[63,53,49,44],[63,54,49,44,"startOfQuarter"],[63,68,49,44],[63,70,49,45,"start"],[63,75,49,50],[63,76,49,51],[63,79,49,54],[63,80,49,55],[63,84,49,55,"startOfQuarter"],[63,101,49,69],[63,102,49,69,"startOfQuarter"],[63,116,49,69],[63,118,49,70,"end"],[63,121,49,73],[63,122,49,74],[64,4,50,2],[64,8,50,6,"date"],[64,12,50,10],[64,15,50,13,"reversed"],[64,23,50,21],[64,26,50,24],[64,30,50,24,"startOfQuarter"],[64,47,50,38],[64,48,50,38,"startOfQuarter"],[64,62,50,38],[64,64,50,39,"end"],[64,67,50,42],[64,68,50,43],[64,71,50,46],[64,75,50,46,"startOfQuarter"],[64,92,50,60],[64,93,50,60,"startOfQuarter"],[64,107,50,60],[64,109,50,61,"start"],[64,114,50,66],[64,115,50,67],[65,4,52,2],[65,8,52,6,"step"],[65,12,52,10],[65,15,52,13,"options"],[65,22,52,20],[65,24,52,22,"step"],[65,28,52,26],[65,32,52,30],[65,33,52,31],[66,4,53,2],[66,8,53,6],[66,9,53,7,"step"],[66,13,53,11],[66,15,53,13],[66,22,53,20],[66,24,53,22],[67,4,54,2],[67,8,54,6,"step"],[67,12,54,10],[67,15,54,13],[67,16,54,14],[67,18,54,16],[68,6,55,4,"step"],[68,10,55,8],[68,13,55,11],[68,14,55,12,"step"],[68,18,55,16],[69,6,56,4,"reversed"],[69,14,56,12],[69,17,56,15],[69,18,56,16,"reversed"],[69,26,56,24],[70,4,57,2],[71,4,59,2],[71,10,59,8,"dates"],[71,15,59,13],[71,18,59,16],[71,20,59,18],[72,4,61,2],[72,11,61,9],[72,12,61,10,"date"],[72,16,61,14],[72,20,61,18,"endTime"],[72,27,61,25],[72,29,61,27],[73,6,62,4,"dates"],[73,11,62,9],[73,12,62,10,"push"],[73,16,62,14],[73,17,62,15],[73,21,62,15,"constructFrom"],[73,37,62,28],[73,38,62,28,"constructFrom"],[73,51,62,28],[73,53,62,29,"start"],[73,58,62,34],[73,60,62,36,"date"],[73,64,62,40],[73,65,62,41],[73,66,62,42],[74,6,63,4,"date"],[74,10,63,8],[74,13,63,11],[74,17,63,11,"addQuarters"],[74,31,63,22],[74,32,63,22,"addQuarters"],[74,43,63,22],[74,45,63,23,"date"],[74,49,63,27],[74,51,63,29,"step"],[74,55,63,33],[74,56,63,34],[75,4,64,2],[76,4,66,2],[76,11,66,9,"reversed"],[76,19,66,17],[76,22,66,20,"dates"],[76,27,66,25],[76,28,66,26,"reverse"],[76,35,66,33],[76,36,66,34],[76,37,66,35],[76,40,66,38,"dates"],[76,45,66,43],[77,2,67,0],[79,2,69,0],[80,2,70,0],[80,6,70,0,"_default"],[80,14,70,0],[80,17,70,15,"eachQuarterOfInterval"],[80,38,70,36],[81,0,70,37],[81,3]],"functionMap":{"names":["<global>","eachQuarterOfInterval"],"mappings":"AAA;OC4C;CDsB"},"hasCjsExports":false},"type":"js/module"}]}