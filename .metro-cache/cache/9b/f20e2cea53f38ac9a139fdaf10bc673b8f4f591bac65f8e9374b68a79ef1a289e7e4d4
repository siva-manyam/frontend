{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"],"imports":1}},{"name":"./setMonth.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":41,"index":93}}],"key":"gsWkpqz1f06DeP1VTTlv8Ay4qZE=","exportNames":["*"],"imports":1}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":94},"end":{"line":3,"column":37,"index":131}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.set = set;\n  var _constructFromJs = require(_dependencyMap[0], \"./constructFrom.js\");\n  var _setMonthJs = require(_dependencyMap[1], \"./setMonth.js\");\n  var _toDateJs = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link set} function options.\n   */\n\n  /**\n   * @name set\n   * @category Common Helpers\n   * @summary Set date values to a given date.\n   *\n   * @description\n   * Set date values to a given date.\n   *\n   * Sets time values to date from object `values`.\n   * A value is not set if it is undefined or null or doesn't exist in `values`.\n   *\n   * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n   * to use native `Date#setX` methods. If you use this function, you may not want to include the\n   * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param values - The date values to be set\n   * @param options - The options\n   *\n   * @returns The new date with options set\n   *\n   * @example\n   * // Transform 1 September 2014 into 20 October 2015 in a single line:\n   * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n   * //=> Tue Oct 20 2015 00:00:00\n   *\n   * @example\n   * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n   * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n   * //=> Mon Sep 01 2014 12:23:45\n   */\n  function set(date, values, options) {\n    let _date = (0, _toDateJs.toDate)(date, options?.in);\n\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(+_date)) return (0, _constructFromJs.constructFrom)(options?.in || date, NaN);\n    if (values.year != null) _date.setFullYear(values.year);\n    if (values.month != null) _date = (0, _setMonthJs.setMonth)(_date, values.month);\n    if (values.date != null) _date.setDate(values.date);\n    if (values.hours != null) _date.setHours(values.hours);\n    if (values.minutes != null) _date.setMinutes(values.minutes);\n    if (values.seconds != null) _date.setSeconds(values.seconds);\n    if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);\n    return _date;\n  }\n\n  // Fallback for modularized imports:\n  var _default = set;\n});","lineCount":72,"map":[[7,2,61,0,"Object"],[7,8,61,0],[7,9,61,0,"defineProperty"],[7,23,61,0],[7,24,61,0,"exports"],[7,31,61,0],[8,4,61,0,"enumerable"],[8,14,61,0],[9,4,61,0,"get"],[9,7,61,0],[9,18,61,0,"get"],[9,19,61,0],[10,6,61,0],[10,13,61,0,"_default"],[10,21,61,0],[11,4,61,0],[12,2,61,0],[13,2,43,0,"exports"],[13,9,43,0],[13,10,43,0,"set"],[13,13,43,0],[13,16,43,0,"set"],[13,19,43,0],[14,2,1,0],[14,6,1,0,"_constructFromJs"],[14,22,1,0],[14,25,1,0,"require"],[14,32,1,0],[14,33,1,0,"_dependencyMap"],[14,47,1,0],[15,2,2,0],[15,6,2,0,"_setMonthJs"],[15,17,2,0],[15,20,2,0,"require"],[15,27,2,0],[15,28,2,0,"_dependencyMap"],[15,42,2,0],[16,2,3,0],[16,6,3,0,"_toDateJs"],[16,15,3,0],[16,18,3,0,"require"],[16,25,3,0],[16,26,3,0,"_dependencyMap"],[16,40,3,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[21,2,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,2,43,7],[55,11,43,16,"set"],[55,14,43,19,"set"],[55,15,43,20,"date"],[55,19,43,24],[55,21,43,26,"values"],[55,27,43,32],[55,29,43,34,"options"],[55,36,43,41],[55,38,43,43],[56,4,44,2],[56,8,44,6,"_date"],[56,13,44,11],[56,16,44,14],[56,20,44,14,"toDate"],[56,29,44,20],[56,30,44,20,"toDate"],[56,36,44,20],[56,38,44,21,"date"],[56,42,44,25],[56,44,44,27,"options"],[56,51,44,34],[56,53,44,36,"in"],[56,55,44,38],[56,56,44,39],[58,4,46,2],[59,4,47,2],[59,8,47,6,"isNaN"],[59,13,47,11],[59,14,47,12],[59,15,47,13,"_date"],[59,20,47,18],[59,21,47,19],[59,23,47,21],[59,30,47,28],[59,34,47,28,"constructFrom"],[59,50,47,41],[59,51,47,41,"constructFrom"],[59,64,47,41],[59,66,47,42,"options"],[59,73,47,49],[59,75,47,51,"in"],[59,77,47,53],[59,81,47,57,"date"],[59,85,47,61],[59,87,47,63,"NaN"],[59,90,47,66],[59,91,47,67],[60,4,49,2],[60,8,49,6,"values"],[60,14,49,12],[60,15,49,13,"year"],[60,19,49,17],[60,23,49,21],[60,27,49,25],[60,29,49,27,"_date"],[60,34,49,32],[60,35,49,33,"setFullYear"],[60,46,49,44],[60,47,49,45,"values"],[60,53,49,51],[60,54,49,52,"year"],[60,58,49,56],[60,59,49,57],[61,4,50,2],[61,8,50,6,"values"],[61,14,50,12],[61,15,50,13,"month"],[61,20,50,18],[61,24,50,22],[61,28,50,26],[61,30,50,28,"_date"],[61,35,50,33],[61,38,50,36],[61,42,50,36,"setMonth"],[61,53,50,44],[61,54,50,44,"setMonth"],[61,62,50,44],[61,64,50,45,"_date"],[61,69,50,50],[61,71,50,52,"values"],[61,77,50,58],[61,78,50,59,"month"],[61,83,50,64],[61,84,50,65],[62,4,51,2],[62,8,51,6,"values"],[62,14,51,12],[62,15,51,13,"date"],[62,19,51,17],[62,23,51,21],[62,27,51,25],[62,29,51,27,"_date"],[62,34,51,32],[62,35,51,33,"setDate"],[62,42,51,40],[62,43,51,41,"values"],[62,49,51,47],[62,50,51,48,"date"],[62,54,51,52],[62,55,51,53],[63,4,52,2],[63,8,52,6,"values"],[63,14,52,12],[63,15,52,13,"hours"],[63,20,52,18],[63,24,52,22],[63,28,52,26],[63,30,52,28,"_date"],[63,35,52,33],[63,36,52,34,"setHours"],[63,44,52,42],[63,45,52,43,"values"],[63,51,52,49],[63,52,52,50,"hours"],[63,57,52,55],[63,58,52,56],[64,4,53,2],[64,8,53,6,"values"],[64,14,53,12],[64,15,53,13,"minutes"],[64,22,53,20],[64,26,53,24],[64,30,53,28],[64,32,53,30,"_date"],[64,37,53,35],[64,38,53,36,"setMinutes"],[64,48,53,46],[64,49,53,47,"values"],[64,55,53,53],[64,56,53,54,"minutes"],[64,63,53,61],[64,64,53,62],[65,4,54,2],[65,8,54,6,"values"],[65,14,54,12],[65,15,54,13,"seconds"],[65,22,54,20],[65,26,54,24],[65,30,54,28],[65,32,54,30,"_date"],[65,37,54,35],[65,38,54,36,"setSeconds"],[65,48,54,46],[65,49,54,47,"values"],[65,55,54,53],[65,56,54,54,"seconds"],[65,63,54,61],[65,64,54,62],[66,4,55,2],[66,8,55,6,"values"],[66,14,55,12],[66,15,55,13,"milliseconds"],[66,27,55,25],[66,31,55,29],[66,35,55,33],[66,37,55,35,"_date"],[66,42,55,40],[66,43,55,41,"setMilliseconds"],[66,58,55,56],[66,59,55,57,"values"],[66,65,55,63],[66,66,55,64,"milliseconds"],[66,78,55,76],[66,79,55,77],[67,4,57,2],[67,11,57,9,"_date"],[67,16,57,14],[68,2,58,0],[70,2,60,0],[71,2,61,0],[71,6,61,0,"_default"],[71,14,61,0],[71,17,61,15,"set"],[71,20,61,18],[72,0,61,19],[72,3]],"functionMap":{"names":["<global>","set"],"mappings":"AAA;OC0C;CDe"},"hasCjsExports":false},"type":"js/module"}]}