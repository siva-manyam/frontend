{"dependencies":[{"name":"./_lib/format/lightFormatters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"VfPBVPZL5tVjamd4/64vRDUW4DY=","exportNames":["*"],"imports":1}},{"name":"./isValid.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":39,"index":107}}],"key":"Sst1buy9uBfV7bjRtTAEggSwFYs=","exportNames":["*"],"imports":1}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":108},"end":{"line":3,"column":37,"index":145}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  Object.defineProperty(exports, \"lightFormatters\", {\n    enumerable: true,\n    get: function () {\n      return _libFormatLightFormattersJs.lightFormatters;\n    }\n  });\n  exports.lightFormat = lightFormat;\n  var _libFormatLightFormattersJs = require(_dependencyMap[0], \"./_lib/format/lightFormatters.js\");\n  var _isValidJs = require(_dependencyMap[1], \"./isValid.js\");\n  var _toDateJs = require(_dependencyMap[2], \"./toDate.js\");\n  // Rexports of internal for libraries to use.\n  // See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n  // This RegExp consists of three parts separated by `|`:\n  // - (\\w)\\1* matches any sequences of the same letter\n  // - '' matches two quote characters in a row\n  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n  //   except a single quote symbol, which ends the sequence.\n  //   Two quote characters do not end the sequence.\n  //   If there is no matching single quote\n  //   then the sequence will continue until the end of the string.\n  // - . matches any single character unmatched by previous parts of the RegExps\n  const formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n  const escapedStringRegExp = /^'([^]*?)'?$/;\n  const doubleQuoteRegExp = /''/g;\n  const unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n  /**\n   * @private\n   */\n\n  /**\n   * @name lightFormat\n   * @category Common Helpers\n   * @summary Format the date.\n   *\n   * @description\n   * Return the formatted date string in the given format. Unlike `format`,\n   * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n   *\n   * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n   * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   *\n   * The characters wrapped between two single quotes characters (') are escaped.\n   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n   *\n   * Format of the string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   *\n   * Accepted patterns:\n   * | Unit                            | Pattern | Result examples                   |\n   * |---------------------------------|---------|-----------------------------------|\n   * | AM, PM                          | a..aaa  | AM, PM                            |\n   * |                                 | aaaa    | a.m., p.m.                        |\n   * |                                 | aaaaa   | a, p                              |\n   * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n   * |                                 | yy      | 44, 01, 00, 17                    |\n   * |                                 | yyy     | 044, 001, 000, 017                |\n   * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n   * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n   * |                                 | MM      | 01, 02, ..., 12                   |\n   * | Day of month                    | d       | 1, 2, ..., 31                     |\n   * |                                 | dd      | 01, 02, ..., 31                   |\n   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n   * |                                 | hh      | 01, 02, ..., 11, 12               |\n   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n   * |                                 | HH      | 00, 01, 02, ..., 23               |\n   * | Minute                          | m       | 0, 1, ..., 59                     |\n   * |                                 | mm      | 00, 01, ..., 59                   |\n   * | Second                          | s       | 0, 1, ..., 59                     |\n   * |                                 | ss      | 00, 01, ..., 59                   |\n   * | Fraction of second              | S       | 0, 1, ..., 9                      |\n   * |                                 | SS      | 00, 01, ..., 99                   |\n   * |                                 | SSS     | 000, 001, ..., 999                |\n   * |                                 | SSSS    | ...                               |\n   *\n   * @param date - The original date\n   * @param format - The string of tokens\n   *\n   * @returns The formatted date string\n   *\n   * @throws `Invalid time value` if the date is invalid\n   * @throws format string contains an unescaped latin alphabet character\n   *\n   * @example\n   * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n   * //=> '2014-02-11'\n   */\n  function lightFormat(date, formatStr) {\n    const date_ = (0, _toDateJs.toDate)(date);\n    if (!(0, _isValidJs.isValid)(date_)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    const tokens = formatStr.match(formattingTokensRegExp);\n\n    // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n    if (!tokens) return \"\";\n    const result = tokens.map(substring => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n      const formatter = _libFormatLightFormattersJs.lightFormatters[firstCharacter];\n      if (formatter) {\n        return formatter(date_, substring);\n      }\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter + \"`\");\n      }\n      return substring;\n    }).join(\"\");\n    return result;\n  }\n  function cleanEscapedString(input) {\n    const matches = input.match(escapedStringRegExp);\n    if (!matches) return input;\n    return matches[1].replace(doubleQuoteRegExp, \"'\");\n  }\n\n  // Fallback for modularized imports:\n  var _default = lightFormat;\n});","lineCount":138,"map":[[7,2,136,0,"Object"],[7,8,136,0],[7,9,136,0,"defineProperty"],[7,23,136,0],[7,24,136,0,"exports"],[7,31,136,0],[8,4,136,0,"enumerable"],[8,14,136,0],[9,4,136,0,"get"],[9,7,136,0],[9,18,136,0,"get"],[9,19,136,0],[10,6,136,0],[10,13,136,0,"_default"],[10,21,136,0],[11,4,136,0],[12,2,136,0],[13,2,7,0,"Object"],[13,8,7,0],[13,9,7,0,"defineProperty"],[13,23,7,0],[13,24,7,0,"exports"],[13,31,7,0],[14,4,7,0,"enumerable"],[14,14,7,0],[15,4,7,0,"get"],[15,7,7,0],[15,18,7,0,"get"],[15,19,7,0],[16,6,7,0],[16,13,7,9,"lightFormatters"],[16,40,7,24],[16,41,7,24,"lightFormatters"],[16,56,7,24],[17,4,7,24],[18,2,7,24],[19,2,85,0,"exports"],[19,9,85,0],[19,10,85,0,"lightFormat"],[19,21,85,0],[19,24,85,0,"lightFormat"],[19,35,85,0],[20,2,1,0],[20,6,1,0,"_libFormatLightFormattersJs"],[20,33,1,0],[20,36,1,0,"require"],[20,43,1,0],[20,44,1,0,"_dependencyMap"],[20,58,1,0],[21,2,2,0],[21,6,2,0,"_isValidJs"],[21,16,2,0],[21,19,2,0,"require"],[21,26,2,0],[21,27,2,0,"_dependencyMap"],[21,41,2,0],[22,2,3,0],[22,6,3,0,"_toDateJs"],[22,15,3,0],[22,18,3,0,"require"],[22,25,3,0],[22,26,3,0,"_dependencyMap"],[22,40,3,0],[23,2,5,0],[24,2,6,0],[26,2,9,0],[27,2,10,0],[28,2,11,0],[29,2,12,0],[30,2,13,0],[31,2,14,0],[32,2,15,0],[33,2,16,0],[34,2,17,0],[35,2,18,0],[35,8,18,6,"formattingTokensRegExp"],[35,30,18,28],[35,33,18,31],[35,65,18,63],[36,2,20,0],[36,8,20,6,"escapedStringRegExp"],[36,27,20,25],[36,30,20,28],[36,44,20,42],[37,2,21,0],[37,8,21,6,"doubleQuoteRegExp"],[37,25,21,23],[37,28,21,26],[37,33,21,31],[38,2,22,0],[38,8,22,6,"unescapedLatinCharacterRegExp"],[38,37,22,35],[38,40,22,38],[38,50,22,48],[40,2,24,0],[41,0,25,0],[42,0,26,0],[44,2,28,0],[45,0,29,0],[46,0,30,0],[47,0,31,0],[48,0,32,0],[49,0,33,0],[50,0,34,0],[51,0,35,0],[52,0,36,0],[53,0,37,0],[54,0,38,0],[55,0,39,0],[56,0,40,0],[57,0,41,0],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,0,50,0],[67,0,51,0],[68,0,52,0],[69,0,53,0],[70,0,54,0],[71,0,55,0],[72,0,56,0],[73,0,57,0],[74,0,58,0],[75,0,59,0],[76,0,60,0],[77,0,61,0],[78,0,62,0],[79,0,63,0],[80,0,64,0],[81,0,65,0],[82,0,66,0],[83,0,67,0],[84,0,68,0],[85,0,69,0],[86,0,70,0],[87,0,71,0],[88,0,72,0],[89,0,73,0],[90,0,74,0],[91,0,75,0],[92,0,76,0],[93,0,77,0],[94,0,78,0],[95,0,79,0],[96,0,80,0],[97,0,81,0],[98,0,82,0],[99,0,83,0],[100,0,84,0],[101,2,85,7],[101,11,85,16,"lightFormat"],[101,22,85,27,"lightFormat"],[101,23,85,28,"date"],[101,27,85,32],[101,29,85,34,"formatStr"],[101,38,85,43],[101,40,85,45],[102,4,86,2],[102,10,86,8,"date_"],[102,15,86,13],[102,18,86,16],[102,22,86,16,"toDate"],[102,31,86,22],[102,32,86,22,"toDate"],[102,38,86,22],[102,40,86,23,"date"],[102,44,86,27],[102,45,86,28],[103,4,88,2],[103,8,88,6],[103,9,88,7],[103,13,88,7,"isValid"],[103,23,88,14],[103,24,88,14,"isValid"],[103,31,88,14],[103,33,88,15,"date_"],[103,38,88,20],[103,39,88,21],[103,41,88,23],[104,6,89,4],[104,12,89,10],[104,16,89,14,"RangeError"],[104,26,89,24],[104,27,89,25],[104,47,89,45],[104,48,89,46],[105,4,90,2],[106,4,92,2],[106,10,92,8,"tokens"],[106,16,92,14],[106,19,92,17,"formatStr"],[106,28,92,26],[106,29,92,27,"match"],[106,34,92,32],[106,35,92,33,"formattingTokensRegExp"],[106,57,92,55],[106,58,92,56],[108,4,94,2],[109,4,95,2],[109,8,95,6],[109,9,95,7,"tokens"],[109,15,95,13],[109,17,95,15],[109,24,95,22],[109,26,95,24],[110,4,97,2],[110,10,97,8,"result"],[110,16,97,14],[110,19,97,17,"tokens"],[110,25,97,23],[110,26,98,5,"map"],[110,29,98,8],[110,30,98,10,"substring"],[110,39,98,19],[110,43,98,24],[111,6,99,6],[112,6,100,6],[112,10,100,10,"substring"],[112,19,100,19],[112,24,100,24],[112,28,100,28],[112,30,100,30],[113,8,101,8],[113,15,101,15],[113,18,101,18],[114,6,102,6],[115,6,104,6],[115,12,104,12,"firstCharacter"],[115,26,104,26],[115,29,104,29,"substring"],[115,38,104,38],[115,39,104,39],[115,40,104,40],[115,41,104,41],[116,6,105,6],[116,10,105,10,"firstCharacter"],[116,24,105,24],[116,29,105,29],[116,32,105,32],[116,34,105,34],[117,8,106,8],[117,15,106,15,"cleanEscapedString"],[117,33,106,33],[117,34,106,34,"substring"],[117,43,106,43],[117,44,106,44],[118,6,107,6],[119,6,109,6],[119,12,109,12,"formatter"],[119,21,109,21],[119,24,109,24,"lightFormatters"],[119,51,109,39],[119,52,109,39,"lightFormatters"],[119,67,109,39],[119,68,109,40,"firstCharacter"],[119,82,109,54],[119,83,109,55],[120,6,110,6],[120,10,110,10,"formatter"],[120,19,110,19],[120,21,110,21],[121,8,111,8],[121,15,111,15,"formatter"],[121,24,111,24],[121,25,111,25,"date_"],[121,30,111,30],[121,32,111,32,"substring"],[121,41,111,41],[121,42,111,42],[122,6,112,6],[123,6,114,6],[123,10,114,10,"firstCharacter"],[123,24,114,24],[123,25,114,25,"match"],[123,30,114,30],[123,31,114,31,"unescapedLatinCharacterRegExp"],[123,60,114,60],[123,61,114,61],[123,63,114,63],[124,8,115,8],[124,14,115,14],[124,18,115,18,"RangeError"],[124,28,115,28],[124,29,116,10],[124,93,116,74],[124,96,117,12,"firstCharacter"],[124,110,117,26],[124,113,118,12],[124,116,119,8],[124,117,119,9],[125,6,120,6],[126,6,122,6],[126,13,122,13,"substring"],[126,22,122,22],[127,4,123,4],[127,5,123,5],[127,6,123,6],[127,7,124,5,"join"],[127,11,124,9],[127,12,124,10],[127,14,124,12],[127,15,124,13],[128,4,126,2],[128,11,126,9,"result"],[128,17,126,15],[129,2,127,0],[130,2,129,0],[130,11,129,9,"cleanEscapedString"],[130,29,129,27,"cleanEscapedString"],[130,30,129,28,"input"],[130,35,129,33],[130,37,129,35],[131,4,130,2],[131,10,130,8,"matches"],[131,17,130,15],[131,20,130,18,"input"],[131,25,130,23],[131,26,130,24,"match"],[131,31,130,29],[131,32,130,30,"escapedStringRegExp"],[131,51,130,49],[131,52,130,50],[132,4,131,2],[132,8,131,6],[132,9,131,7,"matches"],[132,16,131,14],[132,18,131,16],[132,25,131,23,"input"],[132,30,131,28],[133,4,132,2],[133,11,132,9,"matches"],[133,18,132,16],[133,19,132,17],[133,20,132,18],[133,21,132,19],[133,22,132,20,"replace"],[133,29,132,27],[133,30,132,28,"doubleQuoteRegExp"],[133,47,132,45],[133,49,132,47],[133,52,132,50],[133,53,132,51],[134,2,133,0],[136,2,135,0],[137,2,136,0],[137,6,136,0,"_default"],[137,14,136,0],[137,17,136,15,"lightFormat"],[137,28,136,26],[138,0,136,27],[138,3]],"functionMap":{"names":["<global>","lightFormat","tokens.map$argument_0","cleanEscapedString"],"mappings":"AAA;OCoF;SCa;KDyB;CDI;AGE;CHI"},"hasCjsExports":false},"type":"js/module"}]}