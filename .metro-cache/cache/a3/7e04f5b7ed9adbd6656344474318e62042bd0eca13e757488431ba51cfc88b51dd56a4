{"dependencies":[{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"],"imports":1}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":93},"end":{"line":2,"column":51,"index":144}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"],"imports":1}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n  var _libGetTimezoneOffsetInMillisecondsJs = require(_dependencyMap[0], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _constantsJs = require(_dependencyMap[1], \"./constants.js\");\n  var _toDateJs = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * @name getOverlappingDaysInIntervals\n   * @category Interval Helpers\n   * @summary Get the number of days that overlap in two time intervals\n   *\n   * @description\n   * Get the number of days that overlap in two time intervals. It uses the time\n   * between dates to calculate the number of days, rounding it up to include\n   * partial days.\n   *\n   * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n   * result in 1.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - An object with options\n   *\n   * @returns The number of days that overlap in two time intervals\n   *\n   * @example\n   * // For overlapping time intervals adds 1 for each started overlapping day:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> 3\n   *\n   * @example\n   * // For non-overlapping time intervals returns 0:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> 0\n   */\n\n  function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n    const [leftStart, leftEnd] = [+(0, _toDateJs.toDate)(intervalLeft.start), +(0, _toDateJs.toDate)(intervalLeft.end)].sort((a, b) => a - b);\n    const [rightStart, rightEnd] = [+(0, _toDateJs.toDate)(intervalRight.start), +(0, _toDateJs.toDate)(intervalRight.end)].sort((a, b) => a - b);\n\n    // Prevent NaN result if intervals don't overlap at all.\n    const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n    if (!isOverlapping) return 0;\n\n    // Remove the timezone offset to negate the DST effect on calculations.\n    const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n    const left = overlapLeft - (0, _libGetTimezoneOffsetInMillisecondsJs.getTimezoneOffsetInMilliseconds)(overlapLeft);\n    const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n    const right = overlapRight - (0, _libGetTimezoneOffsetInMillisecondsJs.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n    // Ceil the number to include partial days too.\n    return Math.ceil((right - left) / _constantsJs.millisecondsInDay);\n  }\n\n  // Fallback for modularized imports:\n  var _default = getOverlappingDaysInIntervals;\n});","lineCount":73,"map":[[7,2,66,0,"Object"],[7,8,66,0],[7,9,66,0,"defineProperty"],[7,23,66,0],[7,24,66,0,"exports"],[7,31,66,0],[8,4,66,0,"enumerable"],[8,14,66,0],[9,4,66,0,"get"],[9,7,66,0],[9,18,66,0,"get"],[9,19,66,0],[10,6,66,0],[10,13,66,0,"_default"],[10,21,66,0],[11,4,66,0],[12,2,66,0],[13,2,41,0,"exports"],[13,9,41,0],[13,10,41,0,"getOverlappingDaysInIntervals"],[13,39,41,0],[13,42,41,0,"getOverlappingDaysInIntervals"],[13,71,41,0],[14,2,1,0],[14,6,1,0,"_libGetTimezoneOffsetInMillisecondsJs"],[14,43,1,0],[14,46,1,0,"require"],[14,53,1,0],[14,54,1,0,"_dependencyMap"],[14,68,1,0],[15,2,2,0],[15,6,2,0,"_constantsJs"],[15,18,2,0],[15,21,2,0,"require"],[15,28,2,0],[15,29,2,0,"_dependencyMap"],[15,43,2,0],[16,2,3,0],[16,6,3,0,"_toDateJs"],[16,15,3,0],[16,18,3,0,"require"],[16,25,3,0],[16,26,3,0,"_dependencyMap"],[16,40,3,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[53,2,41,7],[53,11,41,16,"getOverlappingDaysInIntervals"],[53,40,41,45,"getOverlappingDaysInIntervals"],[53,41,41,46,"intervalLeft"],[53,53,41,58],[53,55,41,60,"intervalRight"],[53,68,41,73],[53,70,41,75],[54,4,42,2],[54,10,42,8],[54,11,42,9,"leftStart"],[54,20,42,18],[54,22,42,20,"leftEnd"],[54,29,42,27],[54,30,42,28],[54,33,42,31],[54,34,43,4],[54,35,43,5],[54,39,43,5,"toDate"],[54,48,43,11],[54,49,43,11,"toDate"],[54,55,43,11],[54,57,43,12,"intervalLeft"],[54,69,43,24],[54,70,43,25,"start"],[54,75,43,30],[54,76,43,31],[54,78,44,4],[54,79,44,5],[54,83,44,5,"toDate"],[54,92,44,11],[54,93,44,11,"toDate"],[54,99,44,11],[54,101,44,12,"intervalLeft"],[54,113,44,24],[54,114,44,25,"end"],[54,117,44,28],[54,118,44,29],[54,119,45,3],[54,120,45,4,"sort"],[54,124,45,8],[54,125,45,9],[54,126,45,10,"a"],[54,127,45,11],[54,129,45,13,"b"],[54,130,45,14],[54,135,45,19,"a"],[54,136,45,20],[54,139,45,23,"b"],[54,140,45,24],[54,141,45,25],[55,4,46,2],[55,10,46,8],[55,11,46,9,"rightStart"],[55,21,46,19],[55,23,46,21,"rightEnd"],[55,31,46,29],[55,32,46,30],[55,35,46,33],[55,36,47,4],[55,37,47,5],[55,41,47,5,"toDate"],[55,50,47,11],[55,51,47,11,"toDate"],[55,57,47,11],[55,59,47,12,"intervalRight"],[55,72,47,25],[55,73,47,26,"start"],[55,78,47,31],[55,79,47,32],[55,81,48,4],[55,82,48,5],[55,86,48,5,"toDate"],[55,95,48,11],[55,96,48,11,"toDate"],[55,102,48,11],[55,104,48,12,"intervalRight"],[55,117,48,25],[55,118,48,26,"end"],[55,121,48,29],[55,122,48,30],[55,123,49,3],[55,124,49,4,"sort"],[55,128,49,8],[55,129,49,9],[55,130,49,10,"a"],[55,131,49,11],[55,133,49,13,"b"],[55,134,49,14],[55,139,49,19,"a"],[55,140,49,20],[55,143,49,23,"b"],[55,144,49,24],[55,145,49,25],[57,4,51,2],[58,4,52,2],[58,10,52,8,"isOverlapping"],[58,23,52,21],[58,26,52,24,"leftStart"],[58,35,52,33],[58,38,52,36,"rightEnd"],[58,46,52,44],[58,50,52,48,"rightStart"],[58,60,52,58],[58,63,52,61,"leftEnd"],[58,70,52,68],[59,4,53,2],[59,8,53,6],[59,9,53,7,"isOverlapping"],[59,22,53,20],[59,24,53,22],[59,31,53,29],[59,32,53,30],[61,4,55,2],[62,4,56,2],[62,10,56,8,"overlapLeft"],[62,21,56,19],[62,24,56,22,"rightStart"],[62,34,56,32],[62,37,56,35,"leftStart"],[62,46,56,44],[62,49,56,47,"leftStart"],[62,58,56,56],[62,61,56,59,"rightStart"],[62,71,56,69],[63,4,57,2],[63,10,57,8,"left"],[63,14,57,12],[63,17,57,15,"overlapLeft"],[63,28,57,26],[63,31,57,29],[63,35,57,29,"getTimezoneOffsetInMilliseconds"],[63,72,57,60],[63,73,57,60,"getTimezoneOffsetInMilliseconds"],[63,104,57,60],[63,106,57,61,"overlapLeft"],[63,117,57,72],[63,118,57,73],[64,4,58,2],[64,10,58,8,"overlapRight"],[64,22,58,20],[64,25,58,23,"rightEnd"],[64,33,58,31],[64,36,58,34,"leftEnd"],[64,43,58,41],[64,46,58,44,"leftEnd"],[64,53,58,51],[64,56,58,54,"rightEnd"],[64,64,58,62],[65,4,59,2],[65,10,59,8,"right"],[65,15,59,13],[65,18,59,16,"overlapRight"],[65,30,59,28],[65,33,59,31],[65,37,59,31,"getTimezoneOffsetInMilliseconds"],[65,74,59,62],[65,75,59,62,"getTimezoneOffsetInMilliseconds"],[65,106,59,62],[65,108,59,63,"overlapRight"],[65,120,59,75],[65,121,59,76],[67,4,61,2],[68,4,62,2],[68,11,62,9,"Math"],[68,15,62,13],[68,16,62,14,"ceil"],[68,20,62,18],[68,21,62,19],[68,22,62,20,"right"],[68,27,62,25],[68,30,62,28,"left"],[68,34,62,32],[68,38,62,36,"millisecondsInDay"],[68,50,62,53],[68,51,62,53,"millisecondsInDay"],[68,68,62,53],[68,69,62,54],[69,2,63,0],[71,2,65,0],[72,2,66,0],[72,6,66,0,"_default"],[72,14,66,0],[72,17,66,15,"getOverlappingDaysInIntervals"],[72,46,66,44],[73,0,66,45],[73,3]],"functionMap":{"names":["<global>","getOverlappingDaysInIntervals","sort$argument_0"],"mappings":"AAA;OCwC;SCI,eD;SCI,eD;CDc"},"hasCjsExports":false},"type":"js/module"}]}