{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.interval = interval;\n  var _libNormalizeDatesJs = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  /**\n   * The {@link interval} function options.\n   */\n\n  /**\n   * The {@link interval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the start argument,\n   * then the end interval date. If a context function is passed, it uses the context\n   * function return type.\n   */\n\n  /**\n   * @name interval\n   * @category Interval Helpers\n   * @summary Creates an interval object and validates its values.\n   *\n   * @description\n   * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n   *\n   * @typeParam StartDate - Start date type.\n   * @typeParam EndDate - End date type.\n   * @typeParam Options - Options type.\n   *\n   * @param start - The start of the interval.\n   * @param end - The end of the interval.\n   * @param options - The options object.\n   *\n   * @throws `Start date is invalid` when `start` is invalid.\n   * @throws `End date is invalid` when `end` is invalid.\n   * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n   *\n   * @returns The normalized and validated interval object.\n   */\n  function interval(start, end, options) {\n    const [_start, _end] = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, start, end);\n    if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n    if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n    if (options?.assertPositive && +_start > +_end) throw new TypeError(\"End date must be after start date\");\n    return {\n      start: _start,\n      end: _end\n    };\n  }\n\n  // Fallback for modularized imports:\n  var _default = interval;\n});","lineCount":61,"map":[[7,2,49,0,"Object"],[7,8,49,0],[7,9,49,0,"defineProperty"],[7,23,49,0],[7,24,49,0,"exports"],[7,31,49,0],[8,4,49,0,"enumerable"],[8,14,49,0],[9,4,49,0,"get"],[9,7,49,0],[9,18,49,0,"get"],[9,19,49,0],[10,6,49,0],[10,13,49,0,"_default"],[10,21,49,0],[11,4,49,0],[12,2,49,0],[13,2,36,0,"exports"],[13,9,36,0],[13,10,36,0,"interval"],[13,18,36,0],[13,21,36,0,"interval"],[13,29,36,0],[14,2,1,0],[14,6,1,0,"_libNormalizeDatesJs"],[14,26,1,0],[14,29,1,0,"require"],[14,36,1,0],[14,37,1,0,"_dependencyMap"],[14,51,1,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[19,2,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[26,2,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,2,36,7],[48,11,36,16,"interval"],[48,19,36,24,"interval"],[48,20,36,25,"start"],[48,25,36,30],[48,27,36,32,"end"],[48,30,36,35],[48,32,36,37,"options"],[48,39,36,44],[48,41,36,46],[49,4,37,2],[49,10,37,8],[49,11,37,9,"_start"],[49,17,37,15],[49,19,37,17,"_end"],[49,23,37,21],[49,24,37,22],[49,27,37,25],[49,31,37,25,"normalizeDates"],[49,51,37,39],[49,52,37,39,"normalizeDates"],[49,66,37,39],[49,68,37,40,"options"],[49,75,37,47],[49,77,37,49,"in"],[49,79,37,51],[49,81,37,53,"start"],[49,86,37,58],[49,88,37,60,"end"],[49,91,37,63],[49,92,37,64],[50,4,39,2],[50,8,39,6,"isNaN"],[50,13,39,11],[50,14,39,12],[50,15,39,13,"_start"],[50,21,39,19],[50,22,39,20],[50,24,39,22],[50,30,39,28],[50,34,39,32,"TypeError"],[50,43,39,41],[50,44,39,42],[50,67,39,65],[50,68,39,66],[51,4,40,2],[51,8,40,6,"isNaN"],[51,13,40,11],[51,14,40,12],[51,15,40,13,"_end"],[51,19,40,17],[51,20,40,18],[51,22,40,20],[51,28,40,26],[51,32,40,30,"TypeError"],[51,41,40,39],[51,42,40,40],[51,63,40,61],[51,64,40,62],[52,4,42,2],[52,8,42,6,"options"],[52,15,42,13],[52,17,42,15,"assertPositive"],[52,31,42,29],[52,35,42,33],[52,36,42,34,"_start"],[52,42,42,40],[52,45,42,43],[52,46,42,44,"_end"],[52,50,42,48],[52,52,43,4],[52,58,43,10],[52,62,43,14,"TypeError"],[52,71,43,23],[52,72,43,24],[52,107,43,59],[52,108,43,60],[53,4,45,2],[53,11,45,9],[54,6,45,11,"start"],[54,11,45,16],[54,13,45,18,"_start"],[54,19,45,24],[55,6,45,26,"end"],[55,9,45,29],[55,11,45,31,"_end"],[56,4,45,36],[56,5,45,37],[57,2,46,0],[59,2,48,0],[60,2,49,0],[60,6,49,0,"_default"],[60,14,49,0],[60,17,49,15,"interval"],[60,25,49,23],[61,0,49,24],[61,3]],"functionMap":{"names":["<global>","interval"],"mappings":"AAA;OCmC;CDU"},"hasCjsExports":false},"type":"js/module"}]}