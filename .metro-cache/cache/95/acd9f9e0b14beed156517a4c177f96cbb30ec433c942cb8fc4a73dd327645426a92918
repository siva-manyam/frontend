{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.closestIndexTo = closestIndexTo;\n  var _toDateJs = require(_dependencyMap[0], \"./toDate.js\");\n  /**\n   * @name closestIndexTo\n   * @category Common Helpers\n   * @summary Return an index of the closest date from the array comparing to the given date.\n   *\n   * @description\n   * Return an index of the closest date from the array comparing to the given date.\n   *\n   * @param dateToCompare - The date to compare with\n   * @param dates - The array to search\n   *\n   * @returns An index of the date closest to the given date or undefined if no valid value is given\n   *\n   * @example\n   * // Which date is closer to 6 September 2015?\n   * const dateToCompare = new Date(2015, 8, 6)\n   * const datesArray = [\n   *   new Date(2015, 0, 1),\n   *   new Date(2016, 0, 1),\n   *   new Date(2017, 0, 1)\n   * ]\n   * const result = closestIndexTo(dateToCompare, datesArray)\n   * //=> 1\n   */\n  function closestIndexTo(dateToCompare, dates) {\n    // [TODO] It would be better to return -1 here rather than undefined, as this\n    // is how JS behaves, but it would be a breaking change, so we need\n    // to consider it for v4.\n    const timeToCompare = +(0, _toDateJs.toDate)(dateToCompare);\n    if (isNaN(timeToCompare)) return NaN;\n    let result;\n    let minDistance;\n    dates.forEach((date, index) => {\n      const date_ = (0, _toDateJs.toDate)(date);\n      if (isNaN(+date_)) {\n        result = NaN;\n        minDistance = NaN;\n        return;\n      }\n      const distance = Math.abs(timeToCompare - +date_);\n      if (result == null || distance < minDistance) {\n        result = index;\n        minDistance = distance;\n      }\n    });\n    return result;\n  }\n\n  // Fallback for modularized imports:\n  var _default = closestIndexTo;\n});","lineCount":65,"map":[[7,2,57,0,"Object"],[7,8,57,0],[7,9,57,0,"defineProperty"],[7,23,57,0],[7,24,57,0,"exports"],[7,31,57,0],[8,4,57,0,"enumerable"],[8,14,57,0],[9,4,57,0,"get"],[9,7,57,0],[9,18,57,0,"get"],[9,19,57,0],[10,6,57,0],[10,13,57,0,"_default"],[10,21,57,0],[11,4,57,0],[12,2,57,0],[13,2,27,0,"exports"],[13,9,27,0],[13,10,27,0,"closestIndexTo"],[13,24,27,0],[13,27,27,0,"closestIndexTo"],[13,41,27,0],[14,2,1,0],[14,6,1,0,"_toDateJs"],[14,15,1,0],[14,18,1,0,"require"],[14,25,1,0],[14,26,1,0,"_dependencyMap"],[14,40,1,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,2,27,7],[39,11,27,16,"closestIndexTo"],[39,25,27,30,"closestIndexTo"],[39,26,27,31,"dateToCompare"],[39,39,27,44],[39,41,27,46,"dates"],[39,46,27,51],[39,48,27,53],[40,4,28,2],[41,4,29,2],[42,4,30,2],[43,4,31,2],[43,10,31,8,"timeToCompare"],[43,23,31,21],[43,26,31,24],[43,27,31,25],[43,31,31,25,"toDate"],[43,40,31,31],[43,41,31,31,"toDate"],[43,47,31,31],[43,49,31,32,"dateToCompare"],[43,62,31,45],[43,63,31,46],[44,4,33,2],[44,8,33,6,"isNaN"],[44,13,33,11],[44,14,33,12,"timeToCompare"],[44,27,33,25],[44,28,33,26],[44,30,33,28],[44,37,33,35,"NaN"],[44,40,33,38],[45,4,35,2],[45,8,35,6,"result"],[45,14,35,12],[46,4,36,2],[46,8,36,6,"minDistance"],[46,19,36,17],[47,4,37,2,"dates"],[47,9,37,7],[47,10,37,8,"forEach"],[47,17,37,15],[47,18,37,16],[47,19,37,17,"date"],[47,23,37,21],[47,25,37,23,"index"],[47,30,37,28],[47,35,37,33],[48,6,38,4],[48,12,38,10,"date_"],[48,17,38,15],[48,20,38,18],[48,24,38,18,"toDate"],[48,33,38,24],[48,34,38,24,"toDate"],[48,40,38,24],[48,42,38,25,"date"],[48,46,38,29],[48,47,38,30],[49,6,40,4],[49,10,40,8,"isNaN"],[49,15,40,13],[49,16,40,14],[49,17,40,15,"date_"],[49,22,40,20],[49,23,40,21],[49,25,40,23],[50,8,41,6,"result"],[50,14,41,12],[50,17,41,15,"NaN"],[50,20,41,18],[51,8,42,6,"minDistance"],[51,19,42,17],[51,22,42,20,"NaN"],[51,25,42,23],[52,8,43,6],[53,6,44,4],[54,6,46,4],[54,12,46,10,"distance"],[54,20,46,18],[54,23,46,21,"Math"],[54,27,46,25],[54,28,46,26,"abs"],[54,31,46,29],[54,32,46,30,"timeToCompare"],[54,45,46,43],[54,48,46,46],[54,49,46,47,"date_"],[54,54,46,52],[54,55,46,53],[55,6,47,4],[55,10,47,8,"result"],[55,16,47,14],[55,20,47,18],[55,24,47,22],[55,28,47,26,"distance"],[55,36,47,34],[55,39,47,37,"minDistance"],[55,50,47,48],[55,52,47,50],[56,8,48,6,"result"],[56,14,48,12],[56,17,48,15,"index"],[56,22,48,20],[57,8,49,6,"minDistance"],[57,19,49,17],[57,22,49,20,"distance"],[57,30,49,28],[58,6,50,4],[59,4,51,2],[59,5,51,3],[59,6,51,4],[60,4,53,2],[60,11,53,9,"result"],[60,17,53,15],[61,2,54,0],[63,2,56,0],[64,2,57,0],[64,6,57,0,"_default"],[64,14,57,0],[64,17,57,15,"closestIndexTo"],[64,31,57,29],[65,0,57,30],[65,3]],"functionMap":{"names":["<global>","closestIndexTo","dates.forEach$argument_0"],"mappings":"AAA;OC0B;gBCU;GDc;CDG"},"hasCjsExports":false},"type":"js/module"}]}