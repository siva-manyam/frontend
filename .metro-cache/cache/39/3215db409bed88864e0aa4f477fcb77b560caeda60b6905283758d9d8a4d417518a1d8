{"dependencies":[{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"pt9gPO2ve6GSRFbXPAQkm4R9a2w=","exportNames":["*"],"imports":1}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"RLyj7w3ZPZGGUSjkcz/7nwwn2xo=","exportNames":["*"],"imports":1}},{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":64,"index":183}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"],"imports":1}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":92,"index":276}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"],"imports":1}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":58,"index":335}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}},{"name":"./compareAsc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":336},"end":{"line":6,"column":45,"index":381}}],"key":"0qIXq/JoGP2oJkpZUgvMj3rdXHw=","exportNames":["*"],"imports":1}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.formatDistanceStrict = formatDistanceStrict;\n  var _libDefaultLocaleJs = require(_dependencyMap[0], \"./_lib/defaultLocale.js\");\n  var _libDefaultOptionsJs = require(_dependencyMap[1], \"./_lib/defaultOptions.js\");\n  var _libGetRoundingMethodJs = require(_dependencyMap[2], \"./_lib/getRoundingMethod.js\");\n  var _libGetTimezoneOffsetInMillisecondsJs = require(_dependencyMap[3], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _libNormalizeDatesJs = require(_dependencyMap[4], \"./_lib/normalizeDates.js\");\n  var _compareAscJs = require(_dependencyMap[5], \"./compareAsc.js\");\n  var _constantsJs = require(_dependencyMap[6], \"./constants.js\");\n  /**\n   * The {@link formatDistanceStrict} function options.\n   */\n\n  /**\n   * The unit used to format the distance in {@link formatDistanceStrict}.\n   */\n\n  /**\n   * @name formatDistanceStrict\n   * @category Common Helpers\n   * @summary Return the distance between the given dates in words.\n   *\n   * @description\n   * Return the distance between the given dates in words, using strict units.\n   * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n   * 'less than' and the like.\n   *\n   * | Distance between dates | Result              |\n   * |------------------------|---------------------|\n   * | 0 ... 59 secs          | [0..59] seconds     |\n   * | 1 ... 59 mins          | [1..59] minutes     |\n   * | 1 ... 23 hrs           | [1..23] hours       |\n   * | 1 ... 29 days          | [1..29] days        |\n   * | 1 ... 11 months        | [1..11] months      |\n   * | 1 ... N years          | [1..N]  years       |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with\n   * @param options - An object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // What is the distance between 2 July 2014 and 1 January 2015?\n   * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n   * //=> '6 months'\n   *\n   * @example\n   * // What is the distance between 1 January 2015 00:00:15\n   * // and 1 January 2015 00:00:00?\n   * const result = formatDistanceStrict(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   new Date(2015, 0, 1, 0, 0, 0)\n   * )\n   * //=> '15 seconds'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, with a suffix?\n   * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n   *   addSuffix: true\n   * })\n   * //=> '1 year ago'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, in minutes?\n   * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n   *   unit: 'minute'\n   * })\n   * //=> '525600 minutes'\n   *\n   * @example\n   * // What is the distance from 1 January 2015\n   * // to 28 January 2015, in months, rounded up?\n   * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n   *   unit: 'month',\n   *   roundingMethod: 'ceil'\n   * })\n   * //=> '1 month'\n   *\n   * @example\n   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n   *   locale: eoLocale\n   * })\n   * //=> '1 jaro'\n   */\n\n  function formatDistanceStrict(laterDate, earlierDate, options) {\n    const defaultOptions = (0, _libDefaultOptionsJs.getDefaultOptions)();\n    const locale = options?.locale ?? defaultOptions.locale ?? _libDefaultLocaleJs.defaultLocale;\n    const comparison = (0, _compareAscJs.compareAsc)(laterDate, earlierDate);\n    if (isNaN(comparison)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    const localizeOptions = Object.assign({}, options, {\n      addSuffix: options?.addSuffix,\n      comparison: comparison\n    });\n    const [laterDate_, earlierDate_] = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]));\n    const roundingMethod = (0, _libGetRoundingMethodJs.getRoundingMethod)(options?.roundingMethod ?? \"round\");\n    const milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n    const minutes = milliseconds / _constantsJs.millisecondsInMinute;\n    const timezoneOffset = (0, _libGetTimezoneOffsetInMillisecondsJs.getTimezoneOffsetInMilliseconds)(earlierDate_) - (0, _libGetTimezoneOffsetInMillisecondsJs.getTimezoneOffsetInMilliseconds)(laterDate_);\n\n    // Use DST-normalized difference in minutes for years, months and days;\n    // use regular difference in minutes for hours, minutes and seconds.\n    const dstNormalizedMinutes = (milliseconds - timezoneOffset) / _constantsJs.millisecondsInMinute;\n    const defaultUnit = options?.unit;\n    let unit;\n    if (!defaultUnit) {\n      if (minutes < 1) {\n        unit = \"second\";\n      } else if (minutes < 60) {\n        unit = \"minute\";\n      } else if (minutes < _constantsJs.minutesInDay) {\n        unit = \"hour\";\n      } else if (dstNormalizedMinutes < _constantsJs.minutesInMonth) {\n        unit = \"day\";\n      } else if (dstNormalizedMinutes < _constantsJs.minutesInYear) {\n        unit = \"month\";\n      } else {\n        unit = \"year\";\n      }\n    } else {\n      unit = defaultUnit;\n    }\n\n    // 0 up to 60 seconds\n    if (unit === \"second\") {\n      const seconds = roundingMethod(milliseconds / 1000);\n      return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n      // 1 up to 60 mins\n    } else if (unit === \"minute\") {\n      const roundedMinutes = roundingMethod(minutes);\n      return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n      // 1 up to 24 hours\n    } else if (unit === \"hour\") {\n      const hours = roundingMethod(minutes / 60);\n      return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n      // 1 up to 30 days\n    } else if (unit === \"day\") {\n      const days = roundingMethod(dstNormalizedMinutes / _constantsJs.minutesInDay);\n      return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n      // 1 up to 12 months\n    } else if (unit === \"month\") {\n      const months = roundingMethod(dstNormalizedMinutes / _constantsJs.minutesInMonth);\n      return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n      // 1 year up to max Date\n    } else {\n      const years = roundingMethod(dstNormalizedMinutes / _constantsJs.minutesInYear);\n      return locale.formatDistance(\"xYears\", years, localizeOptions);\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = formatDistanceStrict;\n});","lineCount":181,"map":[[7,2,189,0,"Object"],[7,8,189,0],[7,9,189,0,"defineProperty"],[7,23,189,0],[7,24,189,0,"exports"],[7,31,189,0],[8,4,189,0,"enumerable"],[8,14,189,0],[9,4,189,0,"get"],[9,7,189,0],[9,18,189,0,"get"],[9,19,189,0],[10,6,189,0],[10,13,189,0,"_default"],[10,21,189,0],[11,4,189,0],[12,2,189,0],[13,2,100,0,"exports"],[13,9,100,0],[13,10,100,0,"formatDistanceStrict"],[13,30,100,0],[13,33,100,0,"formatDistanceStrict"],[13,53,100,0],[14,2,1,0],[14,6,1,0,"_libDefaultLocaleJs"],[14,25,1,0],[14,28,1,0,"require"],[14,35,1,0],[14,36,1,0,"_dependencyMap"],[14,50,1,0],[15,2,2,0],[15,6,2,0,"_libDefaultOptionsJs"],[15,26,2,0],[15,29,2,0,"require"],[15,36,2,0],[15,37,2,0,"_dependencyMap"],[15,51,2,0],[16,2,3,0],[16,6,3,0,"_libGetRoundingMethodJs"],[16,29,3,0],[16,32,3,0,"require"],[16,39,3,0],[16,40,3,0,"_dependencyMap"],[16,54,3,0],[17,2,4,0],[17,6,4,0,"_libGetTimezoneOffsetInMillisecondsJs"],[17,43,4,0],[17,46,4,0,"require"],[17,53,4,0],[17,54,4,0,"_dependencyMap"],[17,68,4,0],[18,2,5,0],[18,6,5,0,"_libNormalizeDatesJs"],[18,26,5,0],[18,29,5,0,"require"],[18,36,5,0],[18,37,5,0,"_dependencyMap"],[18,51,5,0],[19,2,6,0],[19,6,6,0,"_compareAscJs"],[19,19,6,0],[19,22,6,0,"require"],[19,29,6,0],[19,30,6,0,"_dependencyMap"],[19,44,6,0],[20,2,7,0],[20,6,7,0,"_constantsJs"],[20,18,7,0],[20,21,7,0,"require"],[20,28,7,0],[20,29,7,0,"_dependencyMap"],[20,43,7,0],[21,2,14,0],[22,0,15,0],[23,0,16,0],[25,2,18,0],[26,0,19,0],[27,0,20,0],[29,2,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,0,84,0],[92,0,85,0],[93,0,86,0],[94,0,87,0],[95,0,88,0],[96,0,89,0],[97,0,90,0],[98,0,91,0],[99,0,92,0],[100,0,93,0],[101,0,94,0],[102,0,95,0],[103,0,96,0],[104,0,97,0],[105,0,98,0],[107,2,100,7],[107,11,100,16,"formatDistanceStrict"],[107,31,100,36,"formatDistanceStrict"],[107,32,100,37,"laterDate"],[107,41,100,46],[107,43,100,48,"earlierDate"],[107,54,100,59],[107,56,100,61,"options"],[107,63,100,68],[107,65,100,70],[108,4,101,2],[108,10,101,8,"defaultOptions"],[108,24,101,22],[108,27,101,25],[108,31,101,25,"getDefaultOptions"],[108,51,101,42],[108,52,101,42,"getDefaultOptions"],[108,69,101,42],[108,71,101,43],[108,72,101,44],[109,4,102,2],[109,10,102,8,"locale"],[109,16,102,14],[109,19,102,17,"options"],[109,26,102,24],[109,28,102,26,"locale"],[109,34,102,32],[109,38,102,36,"defaultOptions"],[109,52,102,50],[109,53,102,51,"locale"],[109,59,102,57],[109,63,102,61,"defaultLocale"],[109,82,102,74],[109,83,102,74,"defaultLocale"],[109,96,102,74],[110,4,104,2],[110,10,104,8,"comparison"],[110,20,104,18],[110,23,104,21],[110,27,104,21,"compareAsc"],[110,40,104,31],[110,41,104,31,"compareAsc"],[110,51,104,31],[110,53,104,32,"laterDate"],[110,62,104,41],[110,64,104,43,"earlierDate"],[110,75,104,54],[110,76,104,55],[111,4,106,2],[111,8,106,6,"isNaN"],[111,13,106,11],[111,14,106,12,"comparison"],[111,24,106,22],[111,25,106,23],[111,27,106,25],[112,6,107,4],[112,12,107,10],[112,16,107,14,"RangeError"],[112,26,107,24],[112,27,107,25],[112,47,107,45],[112,48,107,46],[113,4,108,2],[114,4,110,2],[114,10,110,8,"localizeOptions"],[114,25,110,23],[114,28,110,26,"Object"],[114,34,110,32],[114,35,110,33,"assign"],[114,41,110,39],[114,42,110,40],[114,43,110,41],[114,44,110,42],[114,46,110,44,"options"],[114,53,110,51],[114,55,110,53],[115,6,111,4,"addSuffix"],[115,15,111,13],[115,17,111,15,"options"],[115,24,111,22],[115,26,111,24,"addSuffix"],[115,35,111,33],[116,6,112,4,"comparison"],[116,16,112,14],[116,18,112,16,"comparison"],[117,4,113,2],[117,5,113,3],[117,6,113,4],[118,4,115,2],[118,10,115,8],[118,11,115,9,"laterDate_"],[118,21,115,19],[118,23,115,21,"earlierDate_"],[118,35,115,33],[118,36,115,34],[118,39,115,37],[118,43,115,37,"normalizeDates"],[118,63,115,51],[118,64,115,51,"normalizeDates"],[118,78,115,51],[118,80,116,4,"options"],[118,87,116,11],[118,89,116,13,"in"],[118,91,116,15],[118,93,117,4],[118,97,117,8,"comparison"],[118,107,117,18],[118,110,117,21],[118,111,117,22],[118,114,117,25],[118,115,117,26,"earlierDate"],[118,126,117,37],[118,128,117,39,"laterDate"],[118,137,117,48],[118,138,117,49],[118,141,117,52],[118,142,117,53,"laterDate"],[118,151,117,62],[118,153,117,64,"earlierDate"],[118,164,117,75],[118,165,117,76],[118,166,118,2],[118,167,118,3],[119,4,120,2],[119,10,120,8,"roundingMethod"],[119,24,120,22],[119,27,120,25],[119,31,120,25,"getRoundingMethod"],[119,54,120,42],[119,55,120,42,"getRoundingMethod"],[119,72,120,42],[119,74,120,43,"options"],[119,81,120,50],[119,83,120,52,"roundingMethod"],[119,97,120,66],[119,101,120,70],[119,108,120,77],[119,109,120,78],[120,4,122,2],[120,10,122,8,"milliseconds"],[120,22,122,20],[120,25,122,23,"earlierDate_"],[120,37,122,35],[120,38,122,36,"getTime"],[120,45,122,43],[120,46,122,44],[120,47,122,45],[120,50,122,48,"laterDate_"],[120,60,122,58],[120,61,122,59,"getTime"],[120,68,122,66],[120,69,122,67],[120,70,122,68],[121,4,123,2],[121,10,123,8,"minutes"],[121,17,123,15],[121,20,123,18,"milliseconds"],[121,32,123,30],[121,35,123,33,"millisecondsInMinute"],[121,47,123,53],[121,48,123,53,"millisecondsInMinute"],[121,68,123,53],[122,4,125,2],[122,10,125,8,"timezoneOffset"],[122,24,125,22],[122,27,126,4],[122,31,126,4,"getTimezoneOffsetInMilliseconds"],[122,68,126,35],[122,69,126,35,"getTimezoneOffsetInMilliseconds"],[122,100,126,35],[122,102,126,36,"earlierDate_"],[122,114,126,48],[122,115,126,49],[122,118,127,4],[122,122,127,4,"getTimezoneOffsetInMilliseconds"],[122,159,127,35],[122,160,127,35,"getTimezoneOffsetInMilliseconds"],[122,191,127,35],[122,193,127,36,"laterDate_"],[122,203,127,46],[122,204,127,47],[124,4,129,2],[125,4,130,2],[126,4,131,2],[126,10,131,8,"dstNormalizedMinutes"],[126,30,131,28],[126,33,132,4],[126,34,132,5,"milliseconds"],[126,46,132,17],[126,49,132,20,"timezoneOffset"],[126,63,132,34],[126,67,132,38,"millisecondsInMinute"],[126,79,132,58],[126,80,132,58,"millisecondsInMinute"],[126,100,132,58],[127,4,134,2],[127,10,134,8,"defaultUnit"],[127,21,134,19],[127,24,134,22,"options"],[127,31,134,29],[127,33,134,31,"unit"],[127,37,134,35],[128,4,135,2],[128,8,135,6,"unit"],[128,12,135,10],[129,4,136,2],[129,8,136,6],[129,9,136,7,"defaultUnit"],[129,20,136,18],[129,22,136,20],[130,6,137,4],[130,10,137,8,"minutes"],[130,17,137,15],[130,20,137,18],[130,21,137,19],[130,23,137,21],[131,8,138,6,"unit"],[131,12,138,10],[131,15,138,13],[131,23,138,21],[132,6,139,4],[132,7,139,5],[132,13,139,11],[132,17,139,15,"minutes"],[132,24,139,22],[132,27,139,25],[132,29,139,27],[132,31,139,29],[133,8,140,6,"unit"],[133,12,140,10],[133,15,140,13],[133,23,140,21],[134,6,141,4],[134,7,141,5],[134,13,141,11],[134,17,141,15,"minutes"],[134,24,141,22],[134,27,141,25,"minutesInDay"],[134,39,141,37],[134,40,141,37,"minutesInDay"],[134,52,141,37],[134,54,141,39],[135,8,142,6,"unit"],[135,12,142,10],[135,15,142,13],[135,21,142,19],[136,6,143,4],[136,7,143,5],[136,13,143,11],[136,17,143,15,"dstNormalizedMinutes"],[136,37,143,35],[136,40,143,38,"minutesInMonth"],[136,52,143,52],[136,53,143,52,"minutesInMonth"],[136,67,143,52],[136,69,143,54],[137,8,144,6,"unit"],[137,12,144,10],[137,15,144,13],[137,20,144,18],[138,6,145,4],[138,7,145,5],[138,13,145,11],[138,17,145,15,"dstNormalizedMinutes"],[138,37,145,35],[138,40,145,38,"minutesInYear"],[138,52,145,51],[138,53,145,51,"minutesInYear"],[138,66,145,51],[138,68,145,53],[139,8,146,6,"unit"],[139,12,146,10],[139,15,146,13],[139,22,146,20],[140,6,147,4],[140,7,147,5],[140,13,147,11],[141,8,148,6,"unit"],[141,12,148,10],[141,15,148,13],[141,21,148,19],[142,6,149,4],[143,4,150,2],[143,5,150,3],[143,11,150,9],[144,6,151,4,"unit"],[144,10,151,8],[144,13,151,11,"defaultUnit"],[144,24,151,22],[145,4,152,2],[147,4,154,2],[148,4,155,2],[148,8,155,6,"unit"],[148,12,155,10],[148,17,155,15],[148,25,155,23],[148,27,155,25],[149,6,156,4],[149,12,156,10,"seconds"],[149,19,156,17],[149,22,156,20,"roundingMethod"],[149,36,156,34],[149,37,156,35,"milliseconds"],[149,49,156,47],[149,52,156,50],[149,56,156,54],[149,57,156,55],[150,6,157,4],[150,13,157,11,"locale"],[150,19,157,17],[150,20,157,18,"formatDistance"],[150,34,157,32],[150,35,157,33],[150,45,157,43],[150,47,157,45,"seconds"],[150,54,157,52],[150,56,157,54,"localizeOptions"],[150,71,157,69],[150,72,157,70],[152,6,159,4],[153,4,160,2],[153,5,160,3],[153,11,160,9],[153,15,160,13,"unit"],[153,19,160,17],[153,24,160,22],[153,32,160,30],[153,34,160,32],[154,6,161,4],[154,12,161,10,"roundedMinutes"],[154,26,161,24],[154,29,161,27,"roundingMethod"],[154,43,161,41],[154,44,161,42,"minutes"],[154,51,161,49],[154,52,161,50],[155,6,162,4],[155,13,162,11,"locale"],[155,19,162,17],[155,20,162,18,"formatDistance"],[155,34,162,32],[155,35,162,33],[155,45,162,43],[155,47,162,45,"roundedMinutes"],[155,61,162,59],[155,63,162,61,"localizeOptions"],[155,78,162,76],[155,79,162,77],[157,6,164,4],[158,4,165,2],[158,5,165,3],[158,11,165,9],[158,15,165,13,"unit"],[158,19,165,17],[158,24,165,22],[158,30,165,28],[158,32,165,30],[159,6,166,4],[159,12,166,10,"hours"],[159,17,166,15],[159,20,166,18,"roundingMethod"],[159,34,166,32],[159,35,166,33,"minutes"],[159,42,166,40],[159,45,166,43],[159,47,166,45],[159,48,166,46],[160,6,167,4],[160,13,167,11,"locale"],[160,19,167,17],[160,20,167,18,"formatDistance"],[160,34,167,32],[160,35,167,33],[160,43,167,41],[160,45,167,43,"hours"],[160,50,167,48],[160,52,167,50,"localizeOptions"],[160,67,167,65],[160,68,167,66],[162,6,169,4],[163,4,170,2],[163,5,170,3],[163,11,170,9],[163,15,170,13,"unit"],[163,19,170,17],[163,24,170,22],[163,29,170,27],[163,31,170,29],[164,6,171,4],[164,12,171,10,"days"],[164,16,171,14],[164,19,171,17,"roundingMethod"],[164,33,171,31],[164,34,171,32,"dstNormalizedMinutes"],[164,54,171,52],[164,57,171,55,"minutesInDay"],[164,69,171,67],[164,70,171,67,"minutesInDay"],[164,82,171,67],[164,83,171,68],[165,6,172,4],[165,13,172,11,"locale"],[165,19,172,17],[165,20,172,18,"formatDistance"],[165,34,172,32],[165,35,172,33],[165,42,172,40],[165,44,172,42,"days"],[165,48,172,46],[165,50,172,48,"localizeOptions"],[165,65,172,63],[165,66,172,64],[167,6,174,4],[168,4,175,2],[168,5,175,3],[168,11,175,9],[168,15,175,13,"unit"],[168,19,175,17],[168,24,175,22],[168,31,175,29],[168,33,175,31],[169,6,176,4],[169,12,176,10,"months"],[169,18,176,16],[169,21,176,19,"roundingMethod"],[169,35,176,33],[169,36,176,34,"dstNormalizedMinutes"],[169,56,176,54],[169,59,176,57,"minutesInMonth"],[169,71,176,71],[169,72,176,71,"minutesInMonth"],[169,86,176,71],[169,87,176,72],[170,6,177,4],[170,13,177,11,"months"],[170,19,177,17],[170,24,177,22],[170,26,177,24],[170,30,177,28,"defaultUnit"],[170,41,177,39],[170,46,177,44],[170,53,177,51],[170,56,178,8,"locale"],[170,62,178,14],[170,63,178,15,"formatDistance"],[170,77,178,29],[170,78,178,30],[170,86,178,38],[170,88,178,40],[170,89,178,41],[170,91,178,43,"localizeOptions"],[170,106,178,58],[170,107,178,59],[170,110,179,8,"locale"],[170,116,179,14],[170,117,179,15,"formatDistance"],[170,131,179,29],[170,132,179,30],[170,141,179,39],[170,143,179,41,"months"],[170,149,179,47],[170,151,179,49,"localizeOptions"],[170,166,179,64],[170,167,179,65],[172,6,181,4],[173,4,182,2],[173,5,182,3],[173,11,182,9],[174,6,183,4],[174,12,183,10,"years"],[174,17,183,15],[174,20,183,18,"roundingMethod"],[174,34,183,32],[174,35,183,33,"dstNormalizedMinutes"],[174,55,183,53],[174,58,183,56,"minutesInYear"],[174,70,183,69],[174,71,183,69,"minutesInYear"],[174,84,183,69],[174,85,183,70],[175,6,184,4],[175,13,184,11,"locale"],[175,19,184,17],[175,20,184,18,"formatDistance"],[175,34,184,32],[175,35,184,33],[175,43,184,41],[175,45,184,43,"years"],[175,50,184,48],[175,52,184,50,"localizeOptions"],[175,67,184,65],[175,68,184,66],[176,4,185,2],[177,2,186,0],[179,2,188,0],[180,2,189,0],[180,6,189,0,"_default"],[180,14,189,0],[180,17,189,15,"formatDistanceStrict"],[180,37,189,35],[181,0,189,36],[181,3]],"functionMap":{"names":["<global>","formatDistanceStrict"],"mappings":"AAA;OCmG;CDsF"},"hasCjsExports":false},"type":"js/module"}]}