{"dependencies":[{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"pt9gPO2ve6GSRFbXPAQkm4R9a2w=","exportNames":["*"],"imports":1}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"RLyj7w3ZPZGGUSjkcz/7nwwn2xo=","exportNames":["*"],"imports":1}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":92,"index":211}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"],"imports":1}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":212},"end":{"line":4,"column":58,"index":270}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}},{"name":"./compareAsc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":271},"end":{"line":5,"column":45,"index":316}}],"key":"0qIXq/JoGP2oJkpZUgvMj3rdXHw=","exportNames":["*"],"imports":1}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":317},"end":{"line":6,"column":62,"index":379}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"],"imports":1}},{"name":"./differenceInMonths.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":380},"end":{"line":7,"column":61,"index":441}}],"key":"IeGEp66ASPGPZxfJbelFlYNRVPY=","exportNames":["*"],"imports":1}},{"name":"./differenceInSeconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":442},"end":{"line":8,"column":63,"index":505}}],"key":"40yFAaHgVIChYRicd6k8qNnd60I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.formatDistance = formatDistance;\n  var _libDefaultLocaleJs = require(_dependencyMap[0], \"./_lib/defaultLocale.js\");\n  var _libDefaultOptionsJs = require(_dependencyMap[1], \"./_lib/defaultOptions.js\");\n  var _libGetTimezoneOffsetInMillisecondsJs = require(_dependencyMap[2], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _libNormalizeDatesJs = require(_dependencyMap[3], \"./_lib/normalizeDates.js\");\n  var _compareAscJs = require(_dependencyMap[4], \"./compareAsc.js\");\n  var _constantsJs = require(_dependencyMap[5], \"./constants.js\");\n  var _differenceInMonthsJs = require(_dependencyMap[6], \"./differenceInMonths.js\");\n  var _differenceInSecondsJs = require(_dependencyMap[7], \"./differenceInSeconds.js\");\n  /**\n   * The {@link formatDistance} function options.\n   */\n\n  /**\n   * @name formatDistance\n   * @category Common Helpers\n   * @summary Return the distance between the given dates in words.\n   *\n   * @description\n   * Return the distance between the given dates in words.\n   *\n   * | Distance between dates                                            | Result              |\n   * |-------------------------------------------------------------------|---------------------|\n   * | 0 ... 30 secs                                                     | less than a minute  |\n   * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n   * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n   * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n   * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n   * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n   * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n   * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n   * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n   * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n   * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n   * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n   * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n   * | N yrs ... N yrs 3 months                                          | about N years       |\n   * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n   * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n   *\n   * With `options.includeSeconds == true`:\n   * | Distance between dates | Result               |\n   * |------------------------|----------------------|\n   * | 0 secs ... 5 secs      | less than 5 seconds  |\n   * | 5 secs ... 10 secs     | less than 10 seconds |\n   * | 10 secs ... 20 secs    | less than 20 seconds |\n   * | 20 secs ... 40 secs    | half a minute        |\n   * | 40 secs ... 60 secs    | less than a minute   |\n   * | 60 secs ... 90 secs    | 1 minute             |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with\n   * @param options - An object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // What is the distance between 2 July 2014 and 1 January 2015?\n   * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n   * //=> '6 months'\n   *\n   * @example\n   * // What is the distance between 1 January 2015 00:00:15\n   * // and 1 January 2015 00:00:00, including seconds?\n   * const result = formatDistance(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   new Date(2015, 0, 1, 0, 0, 0),\n   *   { includeSeconds: true }\n   * )\n   * //=> 'less than 20 seconds'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, with a suffix?\n   * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n   *   addSuffix: true\n   * })\n   * //=> 'about 1 year ago'\n   *\n   * @example\n   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n   *   locale: eoLocale\n   * })\n   * //=> 'pli ol 1 jaro'\n   */\n  function formatDistance(laterDate, earlierDate, options) {\n    const defaultOptions = (0, _libDefaultOptionsJs.getDefaultOptions)();\n    const locale = options?.locale ?? defaultOptions.locale ?? _libDefaultLocaleJs.defaultLocale;\n    const minutesInAlmostTwoDays = 2520;\n    const comparison = (0, _compareAscJs.compareAsc)(laterDate, earlierDate);\n    if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n    const localizeOptions = Object.assign({}, options, {\n      addSuffix: options?.addSuffix,\n      comparison: comparison\n    });\n    const [laterDate_, earlierDate_] = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]));\n    const seconds = (0, _differenceInSecondsJs.differenceInSeconds)(earlierDate_, laterDate_);\n    const offsetInSeconds = ((0, _libGetTimezoneOffsetInMillisecondsJs.getTimezoneOffsetInMilliseconds)(earlierDate_) - (0, _libGetTimezoneOffsetInMillisecondsJs.getTimezoneOffsetInMilliseconds)(laterDate_)) / 1000;\n    const minutes = Math.round((seconds - offsetInSeconds) / 60);\n    let months;\n\n    // 0 up to 2 mins\n    if (minutes < 2) {\n      if (options?.includeSeconds) {\n        if (seconds < 5) {\n          return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n        } else if (seconds < 10) {\n          return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n        } else if (seconds < 20) {\n          return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n        } else if (seconds < 40) {\n          return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n        } else if (seconds < 60) {\n          return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n        } else {\n          return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n        }\n      } else {\n        if (minutes === 0) {\n          return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n        } else {\n          return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n        }\n      }\n\n      // 2 mins up to 0.75 hrs\n    } else if (minutes < 45) {\n      return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n      // 0.75 hrs up to 1.5 hrs\n    } else if (minutes < 90) {\n      return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n      // 1.5 hrs up to 24 hrs\n    } else if (minutes < _constantsJs.minutesInDay) {\n      const hours = Math.round(minutes / 60);\n      return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n      // 1 day up to 1.75 days\n    } else if (minutes < minutesInAlmostTwoDays) {\n      return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n      // 1.75 days up to 30 days\n    } else if (minutes < _constantsJs.minutesInMonth) {\n      const days = Math.round(minutes / _constantsJs.minutesInDay);\n      return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n      // 1 month up to 2 months\n    } else if (minutes < _constantsJs.minutesInMonth * 2) {\n      months = Math.round(minutes / _constantsJs.minutesInMonth);\n      return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n    }\n    months = (0, _differenceInMonthsJs.differenceInMonths)(earlierDate_, laterDate_);\n\n    // 2 months up to 12 months\n    if (months < 12) {\n      const nearestMonth = Math.round(minutes / _constantsJs.minutesInMonth);\n      return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n      // 1 year up to max Date\n    } else {\n      const monthsSinceStartOfYear = months % 12;\n      const years = Math.trunc(months / 12);\n\n      // N years up to 1 years 3 months\n      if (monthsSinceStartOfYear < 3) {\n        return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n        // N years 3 months up to N years 9 months\n      } else if (monthsSinceStartOfYear < 9) {\n        return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n        // N years 9 months up to N year 12 months\n      } else {\n        return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n      }\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = formatDistance;\n});","lineCount":200,"map":[[7,2,199,0,"Object"],[7,8,199,0],[7,9,199,0,"defineProperty"],[7,23,199,0],[7,24,199,0,"exports"],[7,31,199,0],[8,4,199,0,"enumerable"],[8,14,199,0],[9,4,199,0,"get"],[9,7,199,0],[9,18,199,0,"get"],[9,19,199,0],[10,6,199,0],[10,13,199,0,"_default"],[10,21,199,0],[11,4,199,0],[12,2,199,0],[13,2,92,0,"exports"],[13,9,92,0],[13,10,92,0,"formatDistance"],[13,24,92,0],[13,27,92,0,"formatDistance"],[13,41,92,0],[14,2,1,0],[14,6,1,0,"_libDefaultLocaleJs"],[14,25,1,0],[14,28,1,0,"require"],[14,35,1,0],[14,36,1,0,"_dependencyMap"],[14,50,1,0],[15,2,2,0],[15,6,2,0,"_libDefaultOptionsJs"],[15,26,2,0],[15,29,2,0,"require"],[15,36,2,0],[15,37,2,0,"_dependencyMap"],[15,51,2,0],[16,2,3,0],[16,6,3,0,"_libGetTimezoneOffsetInMillisecondsJs"],[16,43,3,0],[16,46,3,0,"require"],[16,53,3,0],[16,54,3,0,"_dependencyMap"],[16,68,3,0],[17,2,4,0],[17,6,4,0,"_libNormalizeDatesJs"],[17,26,4,0],[17,29,4,0,"require"],[17,36,4,0],[17,37,4,0,"_dependencyMap"],[17,51,4,0],[18,2,5,0],[18,6,5,0,"_compareAscJs"],[18,19,5,0],[18,22,5,0,"require"],[18,29,5,0],[18,30,5,0,"_dependencyMap"],[18,44,5,0],[19,2,6,0],[19,6,6,0,"_constantsJs"],[19,18,6,0],[19,21,6,0,"require"],[19,28,6,0],[19,29,6,0,"_dependencyMap"],[19,43,6,0],[20,2,7,0],[20,6,7,0,"_differenceInMonthsJs"],[20,27,7,0],[20,30,7,0,"require"],[20,37,7,0],[20,38,7,0,"_dependencyMap"],[20,52,7,0],[21,2,8,0],[21,6,8,0,"_differenceInSecondsJs"],[21,28,8,0],[21,31,8,0,"require"],[21,38,8,0],[21,39,8,0,"_dependencyMap"],[21,53,8,0],[22,2,10,0],[23,0,11,0],[24,0,12,0],[26,2,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,0,46,0],[59,0,47,0],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,0,56,0],[69,0,57,0],[70,0,58,0],[71,0,59,0],[72,0,60,0],[73,0,61,0],[74,0,62,0],[75,0,63,0],[76,0,64,0],[77,0,65,0],[78,0,66,0],[79,0,67,0],[80,0,68,0],[81,0,69,0],[82,0,70,0],[83,0,71,0],[84,0,72,0],[85,0,73,0],[86,0,74,0],[87,0,75,0],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,0,81,0],[94,0,82,0],[95,0,83,0],[96,0,84,0],[97,0,85,0],[98,0,86,0],[99,0,87,0],[100,0,88,0],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,2,92,7],[104,11,92,16,"formatDistance"],[104,25,92,30,"formatDistance"],[104,26,92,31,"laterDate"],[104,35,92,40],[104,37,92,42,"earlierDate"],[104,48,92,53],[104,50,92,55,"options"],[104,57,92,62],[104,59,92,64],[105,4,93,2],[105,10,93,8,"defaultOptions"],[105,24,93,22],[105,27,93,25],[105,31,93,25,"getDefaultOptions"],[105,51,93,42],[105,52,93,42,"getDefaultOptions"],[105,69,93,42],[105,71,93,43],[105,72,93,44],[106,4,94,2],[106,10,94,8,"locale"],[106,16,94,14],[106,19,94,17,"options"],[106,26,94,24],[106,28,94,26,"locale"],[106,34,94,32],[106,38,94,36,"defaultOptions"],[106,52,94,50],[106,53,94,51,"locale"],[106,59,94,57],[106,63,94,61,"defaultLocale"],[106,82,94,74],[106,83,94,74,"defaultLocale"],[106,96,94,74],[107,4,95,2],[107,10,95,8,"minutesInAlmostTwoDays"],[107,32,95,30],[107,35,95,33],[107,39,95,37],[108,4,97,2],[108,10,97,8,"comparison"],[108,20,97,18],[108,23,97,21],[108,27,97,21,"compareAsc"],[108,40,97,31],[108,41,97,31,"compareAsc"],[108,51,97,31],[108,53,97,32,"laterDate"],[108,62,97,41],[108,64,97,43,"earlierDate"],[108,75,97,54],[108,76,97,55],[109,4,99,2],[109,8,99,6,"isNaN"],[109,13,99,11],[109,14,99,12,"comparison"],[109,24,99,22],[109,25,99,23],[109,27,99,25],[109,33,99,31],[109,37,99,35,"RangeError"],[109,47,99,45],[109,48,99,46],[109,68,99,66],[109,69,99,67],[110,4,101,2],[110,10,101,8,"localizeOptions"],[110,25,101,23],[110,28,101,26,"Object"],[110,34,101,32],[110,35,101,33,"assign"],[110,41,101,39],[110,42,101,40],[110,43,101,41],[110,44,101,42],[110,46,101,44,"options"],[110,53,101,51],[110,55,101,53],[111,6,102,4,"addSuffix"],[111,15,102,13],[111,17,102,15,"options"],[111,24,102,22],[111,26,102,24,"addSuffix"],[111,35,102,33],[112,6,103,4,"comparison"],[112,16,103,14],[112,18,103,16,"comparison"],[113,4,104,2],[113,5,104,3],[113,6,104,4],[114,4,106,2],[114,10,106,8],[114,11,106,9,"laterDate_"],[114,21,106,19],[114,23,106,21,"earlierDate_"],[114,35,106,33],[114,36,106,34],[114,39,106,37],[114,43,106,37,"normalizeDates"],[114,63,106,51],[114,64,106,51,"normalizeDates"],[114,78,106,51],[114,80,107,4,"options"],[114,87,107,11],[114,89,107,13,"in"],[114,91,107,15],[114,93,108,4],[114,97,108,8,"comparison"],[114,107,108,18],[114,110,108,21],[114,111,108,22],[114,114,108,25],[114,115,108,26,"earlierDate"],[114,126,108,37],[114,128,108,39,"laterDate"],[114,137,108,48],[114,138,108,49],[114,141,108,52],[114,142,108,53,"laterDate"],[114,151,108,62],[114,153,108,64,"earlierDate"],[114,164,108,75],[114,165,108,76],[114,166,109,2],[114,167,109,3],[115,4,111,2],[115,10,111,8,"seconds"],[115,17,111,15],[115,20,111,18],[115,24,111,18,"differenceInSeconds"],[115,46,111,37],[115,47,111,37,"differenceInSeconds"],[115,66,111,37],[115,68,111,38,"earlierDate_"],[115,80,111,50],[115,82,111,52,"laterDate_"],[115,92,111,62],[115,93,111,63],[116,4,112,2],[116,10,112,8,"offsetInSeconds"],[116,25,112,23],[116,28,113,4],[116,29,113,5],[116,33,113,5,"getTimezoneOffsetInMilliseconds"],[116,70,113,36],[116,71,113,36,"getTimezoneOffsetInMilliseconds"],[116,102,113,36],[116,104,113,37,"earlierDate_"],[116,116,113,49],[116,117,113,50],[116,120,114,6],[116,124,114,6,"getTimezoneOffsetInMilliseconds"],[116,161,114,37],[116,162,114,37,"getTimezoneOffsetInMilliseconds"],[116,193,114,37],[116,195,114,38,"laterDate_"],[116,205,114,48],[116,206,114,49],[116,210,115,4],[116,214,115,8],[117,4,116,2],[117,10,116,8,"minutes"],[117,17,116,15],[117,20,116,18,"Math"],[117,24,116,22],[117,25,116,23,"round"],[117,30,116,28],[117,31,116,29],[117,32,116,30,"seconds"],[117,39,116,37],[117,42,116,40,"offsetInSeconds"],[117,57,116,55],[117,61,116,59],[117,63,116,61],[117,64,116,62],[118,4,117,2],[118,8,117,6,"months"],[118,14,117,12],[120,4,119,2],[121,4,120,2],[121,8,120,6,"minutes"],[121,15,120,13],[121,18,120,16],[121,19,120,17],[121,21,120,19],[122,6,121,4],[122,10,121,8,"options"],[122,17,121,15],[122,19,121,17,"includeSeconds"],[122,33,121,31],[122,35,121,33],[123,8,122,6],[123,12,122,10,"seconds"],[123,19,122,17],[123,22,122,20],[123,23,122,21],[123,25,122,23],[124,10,123,8],[124,17,123,15,"locale"],[124,23,123,21],[124,24,123,22,"formatDistance"],[124,38,123,36],[124,39,123,37],[124,57,123,55],[124,59,123,57],[124,60,123,58],[124,62,123,60,"localizeOptions"],[124,77,123,75],[124,78,123,76],[125,8,124,6],[125,9,124,7],[125,15,124,13],[125,19,124,17,"seconds"],[125,26,124,24],[125,29,124,27],[125,31,124,29],[125,33,124,31],[126,10,125,8],[126,17,125,15,"locale"],[126,23,125,21],[126,24,125,22,"formatDistance"],[126,38,125,36],[126,39,125,37],[126,57,125,55],[126,59,125,57],[126,61,125,59],[126,63,125,61,"localizeOptions"],[126,78,125,76],[126,79,125,77],[127,8,126,6],[127,9,126,7],[127,15,126,13],[127,19,126,17,"seconds"],[127,26,126,24],[127,29,126,27],[127,31,126,29],[127,33,126,31],[128,10,127,8],[128,17,127,15,"locale"],[128,23,127,21],[128,24,127,22,"formatDistance"],[128,38,127,36],[128,39,127,37],[128,57,127,55],[128,59,127,57],[128,61,127,59],[128,63,127,61,"localizeOptions"],[128,78,127,76],[128,79,127,77],[129,8,128,6],[129,9,128,7],[129,15,128,13],[129,19,128,17,"seconds"],[129,26,128,24],[129,29,128,27],[129,31,128,29],[129,33,128,31],[130,10,129,8],[130,17,129,15,"locale"],[130,23,129,21],[130,24,129,22,"formatDistance"],[130,38,129,36],[130,39,129,37],[130,52,129,50],[130,54,129,52],[130,55,129,53],[130,57,129,55,"localizeOptions"],[130,72,129,70],[130,73,129,71],[131,8,130,6],[131,9,130,7],[131,15,130,13],[131,19,130,17,"seconds"],[131,26,130,24],[131,29,130,27],[131,31,130,29],[131,33,130,31],[132,10,131,8],[132,17,131,15,"locale"],[132,23,131,21],[132,24,131,22,"formatDistance"],[132,38,131,36],[132,39,131,37],[132,57,131,55],[132,59,131,57],[132,60,131,58],[132,62,131,60,"localizeOptions"],[132,77,131,75],[132,78,131,76],[133,8,132,6],[133,9,132,7],[133,15,132,13],[134,10,133,8],[134,17,133,15,"locale"],[134,23,133,21],[134,24,133,22,"formatDistance"],[134,38,133,36],[134,39,133,37],[134,49,133,47],[134,51,133,49],[134,52,133,50],[134,54,133,52,"localizeOptions"],[134,69,133,67],[134,70,133,68],[135,8,134,6],[136,6,135,4],[136,7,135,5],[136,13,135,11],[137,8,136,6],[137,12,136,10,"minutes"],[137,19,136,17],[137,24,136,22],[137,25,136,23],[137,27,136,25],[138,10,137,8],[138,17,137,15,"locale"],[138,23,137,21],[138,24,137,22,"formatDistance"],[138,38,137,36],[138,39,137,37],[138,57,137,55],[138,59,137,57],[138,60,137,58],[138,62,137,60,"localizeOptions"],[138,77,137,75],[138,78,137,76],[139,8,138,6],[139,9,138,7],[139,15,138,13],[140,10,139,8],[140,17,139,15,"locale"],[140,23,139,21],[140,24,139,22,"formatDistance"],[140,38,139,36],[140,39,139,37],[140,49,139,47],[140,51,139,49,"minutes"],[140,58,139,56],[140,60,139,58,"localizeOptions"],[140,75,139,73],[140,76,139,74],[141,8,140,6],[142,6,141,4],[144,6,143,4],[145,4,144,2],[145,5,144,3],[145,11,144,9],[145,15,144,13,"minutes"],[145,22,144,20],[145,25,144,23],[145,27,144,25],[145,29,144,27],[146,6,145,4],[146,13,145,11,"locale"],[146,19,145,17],[146,20,145,18,"formatDistance"],[146,34,145,32],[146,35,145,33],[146,45,145,43],[146,47,145,45,"minutes"],[146,54,145,52],[146,56,145,54,"localizeOptions"],[146,71,145,69],[146,72,145,70],[148,6,147,4],[149,4,148,2],[149,5,148,3],[149,11,148,9],[149,15,148,13,"minutes"],[149,22,148,20],[149,25,148,23],[149,27,148,25],[149,29,148,27],[150,6,149,4],[150,13,149,11,"locale"],[150,19,149,17],[150,20,149,18,"formatDistance"],[150,34,149,32],[150,35,149,33],[150,48,149,46],[150,50,149,48],[150,51,149,49],[150,53,149,51,"localizeOptions"],[150,68,149,66],[150,69,149,67],[152,6,151,4],[153,4,152,2],[153,5,152,3],[153,11,152,9],[153,15,152,13,"minutes"],[153,22,152,20],[153,25,152,23,"minutesInDay"],[153,37,152,35],[153,38,152,35,"minutesInDay"],[153,50,152,35],[153,52,152,37],[154,6,153,4],[154,12,153,10,"hours"],[154,17,153,15],[154,20,153,18,"Math"],[154,24,153,22],[154,25,153,23,"round"],[154,30,153,28],[154,31,153,29,"minutes"],[154,38,153,36],[154,41,153,39],[154,43,153,41],[154,44,153,42],[155,6,154,4],[155,13,154,11,"locale"],[155,19,154,17],[155,20,154,18,"formatDistance"],[155,34,154,32],[155,35,154,33],[155,48,154,46],[155,50,154,48,"hours"],[155,55,154,53],[155,57,154,55,"localizeOptions"],[155,72,154,70],[155,73,154,71],[157,6,156,4],[158,4,157,2],[158,5,157,3],[158,11,157,9],[158,15,157,13,"minutes"],[158,22,157,20],[158,25,157,23,"minutesInAlmostTwoDays"],[158,47,157,45],[158,49,157,47],[159,6,158,4],[159,13,158,11,"locale"],[159,19,158,17],[159,20,158,18,"formatDistance"],[159,34,158,32],[159,35,158,33],[159,42,158,40],[159,44,158,42],[159,45,158,43],[159,47,158,45,"localizeOptions"],[159,62,158,60],[159,63,158,61],[161,6,160,4],[162,4,161,2],[162,5,161,3],[162,11,161,9],[162,15,161,13,"minutes"],[162,22,161,20],[162,25,161,23,"minutesInMonth"],[162,37,161,37],[162,38,161,37,"minutesInMonth"],[162,52,161,37],[162,54,161,39],[163,6,162,4],[163,12,162,10,"days"],[163,16,162,14],[163,19,162,17,"Math"],[163,23,162,21],[163,24,162,22,"round"],[163,29,162,27],[163,30,162,28,"minutes"],[163,37,162,35],[163,40,162,38,"minutesInDay"],[163,52,162,50],[163,53,162,50,"minutesInDay"],[163,65,162,50],[163,66,162,51],[164,6,163,4],[164,13,163,11,"locale"],[164,19,163,17],[164,20,163,18,"formatDistance"],[164,34,163,32],[164,35,163,33],[164,42,163,40],[164,44,163,42,"days"],[164,48,163,46],[164,50,163,48,"localizeOptions"],[164,65,163,63],[164,66,163,64],[166,6,165,4],[167,4,166,2],[167,5,166,3],[167,11,166,9],[167,15,166,13,"minutes"],[167,22,166,20],[167,25,166,23,"minutesInMonth"],[167,37,166,37],[167,38,166,37,"minutesInMonth"],[167,52,166,37],[167,55,166,40],[167,56,166,41],[167,58,166,43],[168,6,167,4,"months"],[168,12,167,10],[168,15,167,13,"Math"],[168,19,167,17],[168,20,167,18,"round"],[168,25,167,23],[168,26,167,24,"minutes"],[168,33,167,31],[168,36,167,34,"minutesInMonth"],[168,48,167,48],[168,49,167,48,"minutesInMonth"],[168,63,167,48],[168,64,167,49],[169,6,168,4],[169,13,168,11,"locale"],[169,19,168,17],[169,20,168,18,"formatDistance"],[169,34,168,32],[169,35,168,33],[169,49,168,47],[169,51,168,49,"months"],[169,57,168,55],[169,59,168,57,"localizeOptions"],[169,74,168,72],[169,75,168,73],[170,4,169,2],[171,4,171,2,"months"],[171,10,171,8],[171,13,171,11],[171,17,171,11,"differenceInMonths"],[171,38,171,29],[171,39,171,29,"differenceInMonths"],[171,57,171,29],[171,59,171,30,"earlierDate_"],[171,71,171,42],[171,73,171,44,"laterDate_"],[171,83,171,54],[171,84,171,55],[173,4,173,2],[174,4,174,2],[174,8,174,6,"months"],[174,14,174,12],[174,17,174,15],[174,19,174,17],[174,21,174,19],[175,6,175,4],[175,12,175,10,"nearestMonth"],[175,24,175,22],[175,27,175,25,"Math"],[175,31,175,29],[175,32,175,30,"round"],[175,37,175,35],[175,38,175,36,"minutes"],[175,45,175,43],[175,48,175,46,"minutesInMonth"],[175,60,175,60],[175,61,175,60,"minutesInMonth"],[175,75,175,60],[175,76,175,61],[176,6,176,4],[176,13,176,11,"locale"],[176,19,176,17],[176,20,176,18,"formatDistance"],[176,34,176,32],[176,35,176,33],[176,44,176,42],[176,46,176,44,"nearestMonth"],[176,58,176,56],[176,60,176,58,"localizeOptions"],[176,75,176,73],[176,76,176,74],[178,6,178,4],[179,4,179,2],[179,5,179,3],[179,11,179,9],[180,6,180,4],[180,12,180,10,"monthsSinceStartOfYear"],[180,34,180,32],[180,37,180,35,"months"],[180,43,180,41],[180,46,180,44],[180,48,180,46],[181,6,181,4],[181,12,181,10,"years"],[181,17,181,15],[181,20,181,18,"Math"],[181,24,181,22],[181,25,181,23,"trunc"],[181,30,181,28],[181,31,181,29,"months"],[181,37,181,35],[181,40,181,38],[181,42,181,40],[181,43,181,41],[183,6,183,4],[184,6,184,4],[184,10,184,8,"monthsSinceStartOfYear"],[184,32,184,30],[184,35,184,33],[184,36,184,34],[184,38,184,36],[185,8,185,6],[185,15,185,13,"locale"],[185,21,185,19],[185,22,185,20,"formatDistance"],[185,36,185,34],[185,37,185,35],[185,50,185,48],[185,52,185,50,"years"],[185,57,185,55],[185,59,185,57,"localizeOptions"],[185,74,185,72],[185,75,185,73],[187,8,187,6],[188,6,188,4],[188,7,188,5],[188,13,188,11],[188,17,188,15,"monthsSinceStartOfYear"],[188,39,188,37],[188,42,188,40],[188,43,188,41],[188,45,188,43],[189,8,189,6],[189,15,189,13,"locale"],[189,21,189,19],[189,22,189,20,"formatDistance"],[189,36,189,34],[189,37,189,35],[189,49,189,47],[189,51,189,49,"years"],[189,56,189,54],[189,58,189,56,"localizeOptions"],[189,73,189,71],[189,74,189,72],[191,8,191,6],[192,6,192,4],[192,7,192,5],[192,13,192,11],[193,8,193,6],[193,15,193,13,"locale"],[193,21,193,19],[193,22,193,20,"formatDistance"],[193,36,193,34],[193,37,193,35],[193,51,193,49],[193,53,193,51,"years"],[193,58,193,56],[193,61,193,59],[193,62,193,60],[193,64,193,62,"localizeOptions"],[193,79,193,77],[193,80,193,78],[194,6,194,4],[195,4,195,2],[196,2,196,0],[198,2,198,0],[199,2,199,0],[199,6,199,0,"_default"],[199,14,199,0],[199,17,199,15,"formatDistance"],[199,31,199,29],[200,0,199,30],[200,3]],"functionMap":{"names":["<global>","formatDistance"],"mappings":"AAA;OC2F;CDwG"},"hasCjsExports":false},"type":"js/module"}]}