{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.isSameYear = isSameYear;\n  var _libNormalizeDatesJs = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  /**\n   * The {@link isSameYear} function options.\n   */\n\n  /**\n   * @name isSameYear\n   * @category Year Helpers\n   * @summary Are the given dates in the same year?\n   *\n   * @description\n   * Are the given dates in the same year?\n   *\n   * @param laterDate - The first date to check\n   * @param earlierDate - The second date to check\n   * @param options - An object with options\n   *\n   * @returns The dates are in the same year\n   *\n   * @example\n   * // Are 2 September 2014 and 25 September 2014 in the same year?\n   * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n   * //=> true\n   */\n  function isSameYear(laterDate, earlierDate, options) {\n    const [laterDate_, earlierDate_] = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, laterDate, earlierDate);\n    return laterDate_.getFullYear() === earlierDate_.getFullYear();\n  }\n\n  // Fallback for modularized imports:\n  var _default = isSameYear;\n});","lineCount":45,"map":[[7,2,36,0,"Object"],[7,8,36,0],[7,9,36,0,"defineProperty"],[7,23,36,0],[7,24,36,0,"exports"],[7,31,36,0],[8,4,36,0,"enumerable"],[8,14,36,0],[9,4,36,0,"get"],[9,7,36,0],[9,18,36,0,"get"],[9,19,36,0],[10,6,36,0],[10,13,36,0,"_default"],[10,21,36,0],[11,4,36,0],[12,2,36,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"isSameYear"],[13,20,26,0],[13,23,26,0,"isSameYear"],[13,33,26,0],[14,2,1,0],[14,6,1,0,"_libNormalizeDatesJs"],[14,26,1,0],[14,29,1,0,"require"],[14,36,1,0],[14,37,1,0,"_dependencyMap"],[14,51,1,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[19,2,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,2,26,7],[38,11,26,16,"isSameYear"],[38,21,26,26,"isSameYear"],[38,22,26,27,"laterDate"],[38,31,26,36],[38,33,26,38,"earlierDate"],[38,44,26,49],[38,46,26,51,"options"],[38,53,26,58],[38,55,26,60],[39,4,27,2],[39,10,27,8],[39,11,27,9,"laterDate_"],[39,21,27,19],[39,23,27,21,"earlierDate_"],[39,35,27,33],[39,36,27,34],[39,39,27,37],[39,43,27,37,"normalizeDates"],[39,63,27,51],[39,64,27,51,"normalizeDates"],[39,78,27,51],[39,80,28,4,"options"],[39,87,28,11],[39,89,28,13,"in"],[39,91,28,15],[39,93,29,4,"laterDate"],[39,102,29,13],[39,104,30,4,"earlierDate"],[39,115,31,2],[39,116,31,3],[40,4,32,2],[40,11,32,9,"laterDate_"],[40,21,32,19],[40,22,32,20,"getFullYear"],[40,33,32,31],[40,34,32,32],[40,35,32,33],[40,40,32,38,"earlierDate_"],[40,52,32,50],[40,53,32,51,"getFullYear"],[40,64,32,62],[40,65,32,63],[40,66,32,64],[41,2,33,0],[43,2,35,0],[44,2,36,0],[44,6,36,0,"_default"],[44,14,36,0],[44,17,36,15,"isSameYear"],[44,27,36,25],[45,0,36,26],[45,3]],"functionMap":{"names":["<global>","isSameYear"],"mappings":"AAA;OCyB;CDO"},"hasCjsExports":false},"type":"js/module"}]}