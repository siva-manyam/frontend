{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.parseJSON = parseJSON;\n  var _toDateJs = require(_dependencyMap[0], \"./toDate.js\");\n  /**\n   * The {@link parseJSON} function options.\n   */\n\n  /**\n   * Converts a complete ISO date string in UTC time, the typical format for transmitting\n   * a date in JSON, to a JavaScript `Date` instance.\n   *\n   * This is a minimal implementation for converting dates retrieved from a JSON API to\n   * a `Date` instance which can be used with other functions in the `date-fns` library.\n   * The following formats are supported:\n   *\n   * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n   * - `2000-03-15T05:20:10Z`: Without milliseconds\n   * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n   * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n   * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n   * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n   * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n   * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n   *\n   * For convenience and ease of use these other input types are also supported\n   * via [toDate](https://date-fns.org/docs/toDate):\n   *\n   * - A `Date` instance will be cloned\n   * - A `number` will be treated as a timestamp\n   *\n   * Any other input type or invalid date strings will return an `Invalid Date`.\n   *\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param dateStr - A fully formed ISO8601 date string to convert\n   * @param options - An object with options\n   *\n   * @returns The parsed date in the local time zone\n   */\n  function parseJSON(dateStr, options) {\n    const parts = dateStr.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/);\n    if (!parts) return (0, _toDateJs.toDate)(NaN, options?.in);\n    return (0, _toDateJs.toDate)(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == \"-\" ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == \"-\" ? -1 : 1), +parts[6], +((parts[7] || \"0\") + \"00\").substring(0, 3)), options?.in);\n  }\n\n  // Fallback for modularized imports:\n  var _default = parseJSON;\n});","lineCount":59,"map":[[7,2,61,0,"Object"],[7,8,61,0],[7,9,61,0,"defineProperty"],[7,23,61,0],[7,24,61,0,"exports"],[7,31,61,0],[8,4,61,0,"enumerable"],[8,14,61,0],[9,4,61,0,"get"],[9,7,61,0],[9,18,61,0,"get"],[9,19,61,0],[10,6,61,0],[10,13,61,0,"_default"],[10,21,61,0],[11,4,61,0],[12,2,61,0],[13,2,39,0,"exports"],[13,9,39,0],[13,10,39,0,"parseJSON"],[13,19,39,0],[13,22,39,0,"parseJSON"],[13,31,39,0],[14,2,1,0],[14,6,1,0,"_toDateJs"],[14,15,1,0],[14,18,1,0,"require"],[14,25,1,0],[14,26,1,0,"_dependencyMap"],[14,40,1,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[19,2,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,2,39,7],[51,11,39,16,"parseJSON"],[51,20,39,25,"parseJSON"],[51,21,39,26,"dateStr"],[51,28,39,33],[51,30,39,35,"options"],[51,37,39,42],[51,39,39,44],[52,4,40,2],[52,10,40,8,"parts"],[52,15,40,13],[52,18,40,16,"dateStr"],[52,25,40,23],[52,26,40,24,"match"],[52,31,40,29],[52,32,41,4],[52,127,42,2],[52,128,42,3],[53,4,44,2],[53,8,44,6],[53,9,44,7,"parts"],[53,14,44,12],[53,16,44,14],[53,23,44,21],[53,27,44,21,"toDate"],[53,36,44,27],[53,37,44,27,"toDate"],[53,43,44,27],[53,45,44,28,"NaN"],[53,48,44,31],[53,50,44,33,"options"],[53,57,44,40],[53,59,44,42,"in"],[53,61,44,44],[53,62,44,45],[54,4,46,2],[54,11,46,9],[54,15,46,9,"toDate"],[54,24,46,15],[54,25,46,15,"toDate"],[54,31,46,15],[54,33,47,4,"Date"],[54,37,47,8],[54,38,47,9,"UTC"],[54,41,47,12],[54,42,48,6],[54,43,48,7,"parts"],[54,48,48,12],[54,49,48,13],[54,50,48,14],[54,51,48,15],[54,53,49,6],[54,54,49,7,"parts"],[54,59,49,12],[54,60,49,13],[54,61,49,14],[54,62,49,15],[54,65,49,18],[54,66,49,19],[54,68,50,6],[54,69,50,7,"parts"],[54,74,50,12],[54,75,50,13],[54,76,50,14],[54,77,50,15],[54,79,51,6],[54,80,51,7,"parts"],[54,85,51,12],[54,86,51,13],[54,87,51,14],[54,88,51,15],[54,91,51,18],[54,92,51,19],[54,93,51,20,"parts"],[54,98,51,25],[54,99,51,26],[54,100,51,27],[54,101,51,28],[54,105,51,32],[54,106,51,33],[54,111,51,38,"parts"],[54,116,51,43],[54,117,51,44],[54,118,51,45],[54,119,51,46],[54,123,51,50],[54,126,51,53],[54,129,51,56],[54,130,51,57],[54,131,51,58],[54,134,51,61],[54,135,51,62],[54,136,51,63],[54,138,52,6],[54,139,52,7,"parts"],[54,144,52,12],[54,145,52,13],[54,146,52,14],[54,147,52,15],[54,150,52,18],[54,151,52,19],[54,152,52,20,"parts"],[54,157,52,25],[54,158,52,26],[54,160,52,28],[54,161,52,29],[54,165,52,33],[54,166,52,34],[54,171,52,39,"parts"],[54,176,52,44],[54,177,52,45],[54,178,52,46],[54,179,52,47],[54,183,52,51],[54,186,52,54],[54,189,52,57],[54,190,52,58],[54,191,52,59],[54,194,52,62],[54,195,52,63],[54,196,52,64],[54,198,53,6],[54,199,53,7,"parts"],[54,204,53,12],[54,205,53,13],[54,206,53,14],[54,207,53,15],[54,209,54,6],[54,210,54,7],[54,211,54,8],[54,212,54,9,"parts"],[54,217,54,14],[54,218,54,15],[54,219,54,16],[54,220,54,17],[54,224,54,21],[54,227,54,24],[54,231,54,28],[54,235,54,32],[54,237,54,34,"substring"],[54,246,54,43],[54,247,54,44],[54,248,54,45],[54,250,54,47],[54,251,54,48],[54,252,55,4],[54,253,55,5],[54,255,56,4,"options"],[54,262,56,11],[54,264,56,13,"in"],[54,266,57,2],[54,267,57,3],[55,2,58,0],[57,2,60,0],[58,2,61,0],[58,6,61,0,"_default"],[58,14,61,0],[58,17,61,15,"parseJSON"],[58,26,61,24],[59,0,61,25],[59,3]],"functionMap":{"names":["<global>","parseJSON"],"mappings":"AAA;OCsC;CDmB"},"hasCjsExports":false},"type":"js/module"}]}