{"dependencies":[{"name":"./constructNow.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":49,"index":49}}],"key":"KxtQUZbfjGqP9AepKKDBoJJ/4sk=","exportNames":["*"],"imports":1}},{"name":"./formatDistance.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":51},"end":{"line":3,"column":53,"index":104}}],"key":"38CFKfK6EieuUjxWIff40Zik7+M=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.formatDistanceToNow = formatDistanceToNow;\n  var _constructNowJs = require(_dependencyMap[0], \"./constructNow.js\");\n  var _formatDistanceJs = require(_dependencyMap[1], \"./formatDistance.js\");\n  /**\n   * The {@link formatDistanceToNow} function options.\n   */\n\n  /**\n   * @name formatDistanceToNow\n   * @category Common Helpers\n   * @summary Return the distance between the given date and now in words.\n   * @pure false\n   *\n   * @description\n   * Return the distance between the given date and now in words.\n   *\n   * | Distance to now                                                   | Result              |\n   * |-------------------------------------------------------------------|---------------------|\n   * | 0 ... 30 secs                                                     | less than a minute  |\n   * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n   * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n   * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n   * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n   * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n   * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n   * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n   * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n   * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n   * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n   * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n   * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n   * | N yrs ... N yrs 3 months                                          | about N years       |\n   * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n   * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n   *\n   * With `options.includeSeconds == true`:\n   * | Distance to now     | Result               |\n   * |---------------------|----------------------|\n   * | 0 secs ... 5 secs   | less than 5 seconds  |\n   * | 5 secs ... 10 secs  | less than 10 seconds |\n   * | 10 secs ... 20 secs | less than 20 seconds |\n   * | 20 secs ... 40 secs | half a minute        |\n   * | 40 secs ... 60 secs | less than a minute   |\n   * | 60 secs ... 90 secs | 1 minute             |\n   *\n   * @param date - The given date\n   * @param options - The object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // If today is 1 January 2015, what is the distance to 2 July 2014?\n   * const result = formatDistanceToNow(\n   *   new Date(2014, 6, 2)\n   * )\n   * //=> '6 months'\n   *\n   * @example\n   * // If now is 1 January 2015 00:00:00,\n   * // what is the distance to 1 January 2015 00:00:15, including seconds?\n   * const result = formatDistanceToNow(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   {includeSeconds: true}\n   * )\n   * //=> 'less than 20 seconds'\n   *\n   * @example\n   * // If today is 1 January 2015,\n   * // what is the distance to 1 January 2016, with a suffix?\n   * const result = formatDistanceToNow(\n   *   new Date(2016, 0, 1),\n   *   {addSuffix: true}\n   * )\n   * //=> 'in about 1 year'\n   *\n   * @example\n   * // If today is 1 January 2015,\n   * // what is the distance to 1 August 2016 in Esperanto?\n   * const eoLocale = require('date-fns/locale/eo')\n   * const result = formatDistanceToNow(\n   *   new Date(2016, 7, 1),\n   *   {locale: eoLocale}\n   * )\n   * //=> 'pli ol 1 jaro'\n   */\n  function formatDistanceToNow(date, options) {\n    return (0, _formatDistanceJs.formatDistance)(date, (0, _constructNowJs.constructNow)(date), options);\n  }\n\n  // Fallback for modularized imports:\n  var _default = formatDistanceToNow;\n});","lineCount":107,"map":[[7,2,95,0,"Object"],[7,8,95,0],[7,9,95,0,"defineProperty"],[7,23,95,0],[7,24,95,0,"exports"],[7,31,95,0],[8,4,95,0,"enumerable"],[8,14,95,0],[9,4,95,0,"get"],[9,7,95,0],[9,18,95,0,"get"],[9,19,95,0],[10,6,95,0],[10,13,95,0,"_default"],[10,21,95,0],[11,4,95,0],[12,2,95,0],[13,2,90,0,"exports"],[13,9,90,0],[13,10,90,0,"formatDistanceToNow"],[13,29,90,0],[13,32,90,0,"formatDistanceToNow"],[13,51,90,0],[14,2,1,0],[14,6,1,0,"_constructNowJs"],[14,21,1,0],[14,24,1,0,"require"],[14,31,1,0],[14,32,1,0,"_dependencyMap"],[14,46,1,0],[15,2,3,0],[15,6,3,0,"_formatDistanceJs"],[15,23,3,0],[15,26,3,0,"require"],[15,33,3,0],[15,34,3,0,"_dependencyMap"],[15,48,3,0],[16,2,5,0],[17,0,6,0],[18,0,7,0],[20,2,9,0],[21,0,10,0],[22,0,11,0],[23,0,12,0],[24,0,13,0],[25,0,14,0],[26,0,15,0],[27,0,16,0],[28,0,17,0],[29,0,18,0],[30,0,19,0],[31,0,20,0],[32,0,21,0],[33,0,22,0],[34,0,23,0],[35,0,24,0],[36,0,25,0],[37,0,26,0],[38,0,27,0],[39,0,28,0],[40,0,29,0],[41,0,30,0],[42,0,31,0],[43,0,32,0],[44,0,33,0],[45,0,34,0],[46,0,35,0],[47,0,36,0],[48,0,37,0],[49,0,38,0],[50,0,39,0],[51,0,40,0],[52,0,41,0],[53,0,42,0],[54,0,43,0],[55,0,44,0],[56,0,45,0],[57,0,46,0],[58,0,47,0],[59,0,48,0],[60,0,49,0],[61,0,50,0],[62,0,51,0],[63,0,52,0],[64,0,53,0],[65,0,54,0],[66,0,55,0],[67,0,56,0],[68,0,57,0],[69,0,58,0],[70,0,59,0],[71,0,60,0],[72,0,61,0],[73,0,62,0],[74,0,63,0],[75,0,64,0],[76,0,65,0],[77,0,66,0],[78,0,67,0],[79,0,68,0],[80,0,69,0],[81,0,70,0],[82,0,71,0],[83,0,72,0],[84,0,73,0],[85,0,74,0],[86,0,75,0],[87,0,76,0],[88,0,77,0],[89,0,78,0],[90,0,79,0],[91,0,80,0],[92,0,81,0],[93,0,82,0],[94,0,83,0],[95,0,84,0],[96,0,85,0],[97,0,86,0],[98,0,87,0],[99,0,88,0],[100,0,89,0],[101,2,90,7],[101,11,90,16,"formatDistanceToNow"],[101,30,90,35,"formatDistanceToNow"],[101,31,90,36,"date"],[101,35,90,40],[101,37,90,42,"options"],[101,44,90,49],[101,46,90,51],[102,4,91,2],[102,11,91,9],[102,15,91,9,"formatDistance"],[102,32,91,23],[102,33,91,23,"formatDistance"],[102,47,91,23],[102,49,91,24,"date"],[102,53,91,28],[102,55,91,30],[102,59,91,30,"constructNow"],[102,74,91,42],[102,75,91,42,"constructNow"],[102,87,91,42],[102,89,91,43,"date"],[102,93,91,47],[102,94,91,48],[102,96,91,50,"options"],[102,103,91,57],[102,104,91,58],[103,2,92,0],[105,2,94,0],[106,2,95,0],[106,6,95,0,"_default"],[106,14,95,0],[106,17,95,15,"formatDistanceToNow"],[106,36,95,34],[107,0,95,35],[107,3]],"functionMap":{"names":["<global>","formatDistanceToNow"],"mappings":"AAA;OCyF;CDE"},"hasCjsExports":false},"type":"js/module"}]}