{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.buildMatchFn = buildMatchFn;\n  function buildMatchFn(args) {\n    return (string, options = {}) => {\n      const width = options.width;\n      const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n      const matchResult = string.match(matchPattern);\n      if (!matchResult) {\n        return null;\n      }\n      const matchedString = matchResult[0];\n      const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n      const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, pattern => pattern.test(matchedString)) :\n      // [TODO] -- I challenge you to fix the type\n      findKey(parsePatterns, pattern => pattern.test(matchedString));\n      let value;\n      value = args.valueCallback ? args.valueCallback(key) : key;\n      value = options.valueCallback ?\n      // [TODO] -- I challenge you to fix the type\n      options.valueCallback(value) : value;\n      const rest = string.slice(matchedString.length);\n      return {\n        value,\n        rest\n      };\n    };\n  }\n  function findKey(object, predicate) {\n    for (const key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n  function findIndex(array, predicate) {\n    for (let key = 0; key < array.length; key++) {\n      if (predicate(array[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n});","lineCount":49,"map":[[7,2,1,0,"exports"],[7,9,1,0],[7,10,1,0,"buildMatchFn"],[7,22,1,0],[7,25,1,0,"buildMatchFn"],[7,37,1,0],[8,2,1,7],[8,11,1,16,"buildMatchFn"],[8,23,1,28,"buildMatchFn"],[8,24,1,29,"args"],[8,28,1,33],[8,30,1,35],[9,4,2,2],[9,11,2,9],[9,12,2,10,"string"],[9,18,2,16],[9,20,2,18,"options"],[9,27,2,25],[9,30,2,28],[9,31,2,29],[9,32,2,30],[9,37,2,35],[10,6,3,4],[10,12,3,10,"width"],[10,17,3,15],[10,20,3,18,"options"],[10,27,3,25],[10,28,3,26,"width"],[10,33,3,31],[11,6,5,4],[11,12,5,10,"matchPattern"],[11,24,5,22],[11,27,6,7,"width"],[11,32,6,12],[11,36,6,16,"args"],[11,40,6,20],[11,41,6,21,"matchPatterns"],[11,54,6,34],[11,55,6,35,"width"],[11,60,6,40],[11,61,6,41],[11,65,7,6,"args"],[11,69,7,10],[11,70,7,11,"matchPatterns"],[11,83,7,24],[11,84,7,25,"args"],[11,88,7,29],[11,89,7,30,"defaultMatchWidth"],[11,106,7,47],[11,107,7,48],[12,6,8,4],[12,12,8,10,"matchResult"],[12,23,8,21],[12,26,8,24,"string"],[12,32,8,30],[12,33,8,31,"match"],[12,38,8,36],[12,39,8,37,"matchPattern"],[12,51,8,49],[12,52,8,50],[13,6,10,4],[13,10,10,8],[13,11,10,9,"matchResult"],[13,22,10,20],[13,24,10,22],[14,8,11,6],[14,15,11,13],[14,19,11,17],[15,6,12,4],[16,6,13,4],[16,12,13,10,"matchedString"],[16,25,13,23],[16,28,13,26,"matchResult"],[16,39,13,37],[16,40,13,38],[16,41,13,39],[16,42,13,40],[17,6,15,4],[17,12,15,10,"parsePatterns"],[17,25,15,23],[17,28,16,7,"width"],[17,33,16,12],[17,37,16,16,"args"],[17,41,16,20],[17,42,16,21,"parsePatterns"],[17,55,16,34],[17,56,16,35,"width"],[17,61,16,40],[17,62,16,41],[17,66,17,6,"args"],[17,70,17,10],[17,71,17,11,"parsePatterns"],[17,84,17,24],[17,85,17,25,"args"],[17,89,17,29],[17,90,17,30,"defaultParseWidth"],[17,107,17,47],[17,108,17,48],[18,6,19,4],[18,12,19,10,"key"],[18,15,19,13],[18,18,19,16,"Array"],[18,23,19,21],[18,24,19,22,"isArray"],[18,31,19,29],[18,32,19,30,"parsePatterns"],[18,45,19,43],[18,46,19,44],[18,49,20,8,"findIndex"],[18,58,20,17],[18,59,20,18,"parsePatterns"],[18,72,20,31],[18,74,20,34,"pattern"],[18,81,20,41],[18,85,20,46,"pattern"],[18,92,20,53],[18,93,20,54,"test"],[18,97,20,58],[18,98,20,59,"matchedString"],[18,111,20,72],[18,112,20,73],[18,113,20,74],[19,6,21,8],[20,6,22,8,"findKey"],[20,13,22,15],[20,14,22,16,"parsePatterns"],[20,27,22,29],[20,29,22,32,"pattern"],[20,36,22,39],[20,40,22,44,"pattern"],[20,47,22,51],[20,48,22,52,"test"],[20,52,22,56],[20,53,22,57,"matchedString"],[20,66,22,70],[20,67,22,71],[20,68,22,72],[21,6,24,4],[21,10,24,8,"value"],[21,15,24,13],[22,6,26,4,"value"],[22,11,26,9],[22,14,26,12,"args"],[22,18,26,16],[22,19,26,17,"valueCallback"],[22,32,26,30],[22,35,26,33,"args"],[22,39,26,37],[22,40,26,38,"valueCallback"],[22,53,26,51],[22,54,26,52,"key"],[22,57,26,55],[22,58,26,56],[22,61,26,59,"key"],[22,64,26,62],[23,6,27,4,"value"],[23,11,27,9],[23,14,27,12,"options"],[23,21,27,19],[23,22,27,20,"valueCallback"],[23,35,27,33],[24,6,28,8],[25,6,29,8,"options"],[25,13,29,15],[25,14,29,16,"valueCallback"],[25,27,29,29],[25,28,29,30,"value"],[25,33,29,35],[25,34,29,36],[25,37,30,8,"value"],[25,42,30,13],[26,6,32,4],[26,12,32,10,"rest"],[26,16,32,14],[26,19,32,17,"string"],[26,25,32,23],[26,26,32,24,"slice"],[26,31,32,29],[26,32,32,30,"matchedString"],[26,45,32,43],[26,46,32,44,"length"],[26,52,32,50],[26,53,32,51],[27,6,34,4],[27,13,34,11],[28,8,34,13,"value"],[28,13,34,18],[29,8,34,20,"rest"],[30,6,34,25],[30,7,34,26],[31,4,35,2],[31,5,35,3],[32,2,36,0],[33,2,38,0],[33,11,38,9,"findKey"],[33,18,38,16,"findKey"],[33,19,38,17,"object"],[33,25,38,23],[33,27,38,25,"predicate"],[33,36,38,34],[33,38,38,36],[34,4,39,2],[34,9,39,7],[34,15,39,13,"key"],[34,18,39,16],[34,22,39,20,"object"],[34,28,39,26],[34,30,39,28],[35,6,40,4],[35,10,41,6,"Object"],[35,16,41,12],[35,17,41,13,"prototype"],[35,26,41,22],[35,27,41,23,"hasOwnProperty"],[35,41,41,37],[35,42,41,38,"call"],[35,46,41,42],[35,47,41,43,"object"],[35,53,41,49],[35,55,41,51,"key"],[35,58,41,54],[35,59,41,55],[35,63,42,6,"predicate"],[35,72,42,15],[35,73,42,16,"object"],[35,79,42,22],[35,80,42,23,"key"],[35,83,42,26],[35,84,42,27],[35,85,42,28],[35,87,43,6],[36,8,44,6],[36,15,44,13,"key"],[36,18,44,16],[37,6,45,4],[38,4,46,2],[39,4,47,2],[39,11,47,9,"undefined"],[39,20,47,18],[40,2,48,0],[41,2,50,0],[41,11,50,9,"findIndex"],[41,20,50,18,"findIndex"],[41,21,50,19,"array"],[41,26,50,24],[41,28,50,26,"predicate"],[41,37,50,35],[41,39,50,37],[42,4,51,2],[42,9,51,7],[42,13,51,11,"key"],[42,16,51,14],[42,19,51,17],[42,20,51,18],[42,22,51,20,"key"],[42,25,51,23],[42,28,51,26,"array"],[42,33,51,31],[42,34,51,32,"length"],[42,40,51,38],[42,42,51,40,"key"],[42,45,51,43],[42,47,51,45],[42,49,51,47],[43,6,52,4],[43,10,52,8,"predicate"],[43,19,52,17],[43,20,52,18,"array"],[43,25,52,23],[43,26,52,24,"key"],[43,29,52,27],[43,30,52,28],[43,31,52,29],[43,33,52,31],[44,8,53,6],[44,15,53,13,"key"],[44,18,53,16],[45,6,54,4],[46,4,55,2],[47,4,56,2],[47,11,56,9,"undefined"],[47,20,56,18],[48,2,57,0],[49,0,57,1],[49,3]],"functionMap":{"names":["<global>","buildMatchFn","<anonymous>","findIndex$argument_1","findKey$argument_1","findKey","findIndex"],"mappings":"AAA,OC;SCC;iCCkB,wCD;+BEE,wCF;GDa;CDC;AKE;CLU;AME;CNO"},"hasCjsExports":false},"type":"js/module"}]}