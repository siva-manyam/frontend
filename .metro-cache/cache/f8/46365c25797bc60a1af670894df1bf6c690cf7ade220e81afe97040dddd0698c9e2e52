{"dependencies":[{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"],"imports":1}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"],"imports":1}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":37,"index":154}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.roundToNearestMinutes = roundToNearestMinutes;\n  var _libGetRoundingMethodJs = require(_dependencyMap[0], \"./_lib/getRoundingMethod.js\");\n  var _constructFromJs = require(_dependencyMap[1], \"./constructFrom.js\");\n  var _toDateJs = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link roundToNearestMinutes} function options.\n   */\n\n  /**\n   * @name roundToNearestMinutes\n   * @category Minute Helpers\n   * @summary Rounds the given date to the nearest minute\n   *\n   * @description\n   * Rounds the given date to the nearest minute (or number of minutes).\n   * Rounds up when the given date is exactly between the nearest round minutes.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to round\n   * @param options - An object with options.\n   *\n   * @returns The new date rounded to the closest minute\n   *\n   * @example\n   * // Round 10 July 2014 12:12:34 to nearest minute:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n   * //=> Thu Jul 10 2014 12:13:00\n   *\n   * @example\n   * // Round 10 July 2014 12:12:34 to nearest quarter hour:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n   * //=> Thu Jul 10 2014 12:15:00\n   *\n   * @example\n   * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\n   * //=> Thu Jul 10 2014 12:12:00\n   *\n   * @example\n   * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\n   * //=> Thu Jul 10 2014 12:30:00\n   */\n  function roundToNearestMinutes(date, options) {\n    const nearestTo = options?.nearestTo ?? 1;\n    if (nearestTo < 1 || nearestTo > 30) return (0, _constructFromJs.constructFrom)(date, NaN);\n    const date_ = (0, _toDateJs.toDate)(date, options?.in);\n    const fractionalSeconds = date_.getSeconds() / 60;\n    const fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60;\n    const minutes = date_.getMinutes() + fractionalSeconds + fractionalMilliseconds;\n    const method = options?.roundingMethod ?? \"round\";\n    const roundingMethod = (0, _libGetRoundingMethodJs.getRoundingMethod)(method);\n    const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n    date_.setMinutes(roundedMinutes, 0, 0);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = roundToNearestMinutes;\n});","lineCount":74,"map":[[7,2,67,0,"Object"],[7,8,67,0],[7,9,67,0,"defineProperty"],[7,23,67,0],[7,24,67,0,"exports"],[7,31,67,0],[8,4,67,0,"enumerable"],[8,14,67,0],[9,4,67,0,"get"],[9,7,67,0],[9,18,67,0,"get"],[9,19,67,0],[10,6,67,0],[10,13,67,0,"_default"],[10,21,67,0],[11,4,67,0],[12,2,67,0],[13,2,46,0,"exports"],[13,9,46,0],[13,10,46,0,"roundToNearestMinutes"],[13,31,46,0],[13,34,46,0,"roundToNearestMinutes"],[13,55,46,0],[14,2,1,0],[14,6,1,0,"_libGetRoundingMethodJs"],[14,29,1,0],[14,32,1,0,"require"],[14,39,1,0],[14,40,1,0,"_dependencyMap"],[14,54,1,0],[15,2,2,0],[15,6,2,0,"_constructFromJs"],[15,22,2,0],[15,25,2,0,"require"],[15,32,2,0],[15,33,2,0,"_dependencyMap"],[15,47,2,0],[16,2,3,0],[16,6,3,0,"_toDateJs"],[16,15,3,0],[16,18,3,0,"require"],[16,25,3,0],[16,26,3,0,"_dependencyMap"],[16,40,3,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[21,2,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,2,46,7],[58,11,46,16,"roundToNearestMinutes"],[58,32,46,37,"roundToNearestMinutes"],[58,33,46,38,"date"],[58,37,46,42],[58,39,46,44,"options"],[58,46,46,51],[58,48,46,53],[59,4,47,2],[59,10,47,8,"nearestTo"],[59,19,47,17],[59,22,47,20,"options"],[59,29,47,27],[59,31,47,29,"nearestTo"],[59,40,47,38],[59,44,47,42],[59,45,47,43],[60,4,49,2],[60,8,49,6,"nearestTo"],[60,17,49,15],[60,20,49,18],[60,21,49,19],[60,25,49,23,"nearestTo"],[60,34,49,32],[60,37,49,35],[60,39,49,37],[60,41,49,39],[60,48,49,46],[60,52,49,46,"constructFrom"],[60,68,49,59],[60,69,49,59,"constructFrom"],[60,82,49,59],[60,84,49,60,"date"],[60,88,49,64],[60,90,49,66,"NaN"],[60,93,49,69],[60,94,49,70],[61,4,51,2],[61,10,51,8,"date_"],[61,15,51,13],[61,18,51,16],[61,22,51,16,"toDate"],[61,31,51,22],[61,32,51,22,"toDate"],[61,38,51,22],[61,40,51,23,"date"],[61,44,51,27],[61,46,51,29,"options"],[61,53,51,36],[61,55,51,38,"in"],[61,57,51,40],[61,58,51,41],[62,4,52,2],[62,10,52,8,"fractionalSeconds"],[62,27,52,25],[62,30,52,28,"date_"],[62,35,52,33],[62,36,52,34,"getSeconds"],[62,46,52,44],[62,47,52,45],[62,48,52,46],[62,51,52,49],[62,53,52,51],[63,4,53,2],[63,10,53,8,"fractionalMilliseconds"],[63,32,53,30],[63,35,53,33,"date_"],[63,40,53,38],[63,41,53,39,"getMilliseconds"],[63,56,53,54],[63,57,53,55],[63,58,53,56],[63,61,53,59],[63,65,53,63],[63,68,53,66],[63,70,53,68],[64,4,54,2],[64,10,54,8,"minutes"],[64,17,54,15],[64,20,55,4,"date_"],[64,25,55,9],[64,26,55,10,"getMinutes"],[64,36,55,20],[64,37,55,21],[64,38,55,22],[64,41,55,25,"fractionalSeconds"],[64,58,55,42],[64,61,55,45,"fractionalMilliseconds"],[64,83,55,67],[65,4,57,2],[65,10,57,8,"method"],[65,16,57,14],[65,19,57,17,"options"],[65,26,57,24],[65,28,57,26,"roundingMethod"],[65,42,57,40],[65,46,57,44],[65,53,57,51],[66,4,58,2],[66,10,58,8,"roundingMethod"],[66,24,58,22],[66,27,58,25],[66,31,58,25,"getRoundingMethod"],[66,54,58,42],[66,55,58,42,"getRoundingMethod"],[66,72,58,42],[66,74,58,43,"method"],[66,80,58,49],[66,81,58,50],[67,4,60,2],[67,10,60,8,"roundedMinutes"],[67,24,60,22],[67,27,60,25,"roundingMethod"],[67,41,60,39],[67,42,60,40,"minutes"],[67,49,60,47],[67,52,60,50,"nearestTo"],[67,61,60,59],[67,62,60,60],[67,65,60,63,"nearestTo"],[67,74,60,72],[68,4,62,2,"date_"],[68,9,62,7],[68,10,62,8,"setMinutes"],[68,20,62,18],[68,21,62,19,"roundedMinutes"],[68,35,62,33],[68,37,62,35],[68,38,62,36],[68,40,62,38],[68,41,62,39],[68,42,62,40],[69,4,63,2],[69,11,63,9,"date_"],[69,16,63,14],[70,2,64,0],[72,2,66,0],[73,2,67,0],[73,6,67,0,"_default"],[73,14,67,0],[73,17,67,15,"roundToNearestMinutes"],[73,38,67,36],[74,0,67,37],[74,3]],"functionMap":{"names":["<global>","roundToNearestMinutes"],"mappings":"AAA;OC6C;CDkB"},"hasCjsExports":false},"type":"js/module"}]}